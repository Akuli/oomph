export class ObjectType(Str name, bool refcounted)
export class FunctionType(List[ObjectType] argtypes)

export class LocalVariable(ObjectType type, int id)
export class BuiltinVariable(Str name, FunctionType type, optional[ObjectType] returntype)
export class ThisFileVariable(Str name, FunctionType type)

# TODO: global (but const) variables
export class Builtins(ObjectType STR, ObjectType INT, ObjectType FLOAT, BuiltinVariable PRINT, BuiltinVariable int_add):
    meth get_types() -> List[ObjectType]:
        let result = new List[ObjectType]()
        result.push(self.STR)
        result.push(self.INT)
        return result

    meth get_variables() -> List[BuiltinVariable]:
        let result = new List[BuiltinVariable]()
        result.push(self.PRINT)
        return result

# TODO: custom constructors
export func create_builtins() -> Builtins:
    let STR = new ObjectType("Str", true)
    let INT = new ObjectType("int", true)
    let FLOAT = new ObjectType("float", true)

    let one_string = new List[ObjectType]()
    one_string.push(STR)

    let two_ints = new List[ObjectType]()
    two_ints.push(INT)
    two_ints.push(INT)

    let prrrint = new BuiltinVariable("print", new FunctionType(one_string), null[ObjectType])
    let int_add = new BuiltinVariable("int_add", new FunctionType(two_ints), new optional[ObjectType](STR))
    return new Builtins(STR, INT, FLOAT, prrrint, int_add)

export union Instruction:
    FloatConstant
    FunctionCall
    IntConstant
    MethodCall
    StringConstant

export class FloatConstant(Str value, LocalVariable var)
export class FunctionCall(BuiltinVariable function, List[LocalVariable] args, optional[LocalVariable] result_var)
export class IntConstant(int value, LocalVariable var)
export class MethodCall(LocalVariable obj, Str method_name, List[LocalVariable] args, optional[LocalVariable] result)
export class StringConstant(Str value, LocalVariable var)

export class FuncDef(ThisFileVariable var, List[LocalVariable] argvars, List[Instruction] body)
