import "<stdlib>/io.oomph" as io
import "<stdlib>/subprocess.oomph" as process
import "ast2ir.oomph" as ast2ir
import "c_output.oomph" as c_output
import "ir.oomph" as ir
import "parser.oomph" as parser

# TODO: respect quoting rules
func split(Str s) -> List[Str]:
    let result = new List[Str]()
    foreach part of s.split(" "):
        if part != "":
            result.push(part)
    return result

func get_c_compiler_command(Str project_root, Str c_path, Str exepath) -> List[Str]:
    # TODO: dict
    let cc = ""
    let cflags = ""
    let ldflags = ""

    foreach line of io::read_file("obj/compile_info.txt").split("\n"):
        if line == "":
            continue
        if line.starts_with("cc="):
            # TODO: remove_prefix or similar method
            cc = line.slice("cc=".length(), line.length())
        elif line.starts_with("cflags="):
            cflags = line.slice("cflags=".length(), line.length())
        elif line.starts_with("ldflags="):
            ldflags = line.slice("ldflags=".length(), line.length())
        else:
            assert(false)   # TODO: error

    let result = [cc]
    result.push_all(split(cflags))
    # FIXME: hard-coded list
    result.push_all("obj/io.o obj/misc.o obj/numbers.o obj/ref.o obj/string.o obj/subprocess.o".split(" "))
    result.push(c_path)
    result.push("-o")
    result.push(exepath)
    result.push_all(split(ldflags))
    result.push("-I")
    result.push(project_root)
    return result

export func main():
    let project_root = "."
    let cache_dir = "{project_root}/.oomph-cache"
    io::mkdir(cache_dir)

    let args = process::get_args()
    assert(args.length() != 0)  # TODO: error
    let source_path = args.first()

    let builtins = ir::create_builtins()
    let code = io::read_file(source_path)
    let ast = parser::parse_file(code)
    let ir = ast2ir::convert_program(builtins, ast)
    let c_code = c_output::create_code(builtins, ir)
    io::write_file("{cache_dir}/out.c", c_code)
    assert(process::run(get_c_compiler_command(project_root, "{cache_dir}/out.c", "{cache_dir}/out")) == 0)

    let run_command = ["{cache_dir}/out"]
    # TODO: list slice method
    for let i = 1; i < args.length(); i = i+1:
        run_command.push(args.get(i))
    assert(process::run(run_command) == 0)
