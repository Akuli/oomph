import "ir.oomph" as ir

class File(ir::Builtins builtins, List[Str] declared_strings, Str string_defs):
    meth get_type_c_name(ir::ObjectType type) -> Str:
        # TODO: simplify this with C typedefs
        if type == self.builtins.INT or type == self.builtins.FLOAT:
            return type.name
        return "struct class_{type.name}"

    meth emit_type(ir::ObjectType type) -> Str:
        if type == self.builtins.INT:
            return "int64_t"
        if type == self.builtins.FLOAT:
            return "double"
        if type.refcounted:
            return self.get_type_c_name(type) + "*"
        return self.get_type_c_name(type)

    meth emit_declaration(ir::ObjectType type, Str varname) -> Str:
        if type == self.builtins.INT or type == self.builtins.FLOAT:
            return "{self.emit_type(type)} {varname};"
        return "{self.emit_type(type)} {varname} = NULL;"

    meth emit_string(Str value) -> Str:
        # TODO: replace with one of: list find method, enumerate, mapping
        for let i = 0; i < self.declared_strings.length(); i = i+1:
            if self.declared_strings.get(i) == value:
                return "string{i}"

        let varname = "string{self.declared_strings.length()}"
        self.declared_strings.push(value)

        let content_chars = []
        for let i = 0; i < value.length(); i = i+1:
            # FIXME: escaping
            # FIXME: non-ascii chars
            content_chars.push("'" + value.slice(i, i+1) + "'")
        content_chars.push("'\\0'")

        self.string_defs = self.string_defs + """
        static {self.emit_type(self.builtins.STR)} {varname}
        = (void*)(unsigned char[])\{
            // TODO: is this insanity cross-platform enough?
            0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff,
            {content_chars.join(",")}
        \};
        """
        return varname

class FunctionEmitter(File file, List[ir::LocalVariable] declared_vars, Str before_body, Str body, Str after_body):
    meth emit_var(ir::LocalVariable var) -> Str:
        # TODO: list contains method
        foreach declared_var of self.declared_vars:
            if declared_var == var:
                return "var{var.id}"

        self.before_body = self.before_body + self.file.emit_declaration(var.type, "var{var.id}")
        self.declared_vars.push(var)
        return "var{var.id}"

    meth emit_call(Str c_func, List[ir::LocalVariable] args, Optional[ir::LocalVariable] result):
        let arg_strings = []
        foreach arg of args:
            arg_strings.push(self.emit_var(arg))
        if result == null:
            let assignment = ""
        else:
            assignment = "{self.emit_var(result.get())} ="

        self.body = self.body + """
        {assignment} {c_func}({arg_strings.join(",")});
        """

    meth emit_instruction(ir::Instruction ins):
        switch ins:
            case ir::FloatConstant floatconst:
                self.body = self.body + """
                {self.emit_var(floatconst.var)} = {floatconst.value};
                """
            case ir::FunctionCall call:
                if call.function == self.file.builtins.PRINT:
                    self.emit_call("io_print", call.args, null)
                else:
                    self.emit_call(call.function.name, call.args, call.result_var)
            case ir::IntConstant intconst:
                self.body = self.body + """
                {self.emit_var(intconst.var)} = {intconst.value}LL;
                """
            case ir::IntToFloat cast:
                self.body = self.body + """
                {self.emit_var(cast.float_var)} = (double){self.emit_var(cast.int_var)};
                """
            case ir::MethodCall call:
                let args = [call.obj]
                args.push_all(call.args)
                self.emit_call("meth_{self.file.get_type_c_name(call.obj.type)}_{call.method_name}", args, call.result)
            case ir::StringConstant strconst:
                self.body = self.body + """
                {self.emit_var(strconst.var)} = {self.file.emit_string(strconst.value)};
                """

export func create_code(ir::Builtins builtins, List[ir::FuncDef] ir) -> Str:
    let file = new File(builtins, [], "")

    let code = ""
    foreach funcdef of ir:
        assert(funcdef.var.name == "main")
        assert(funcdef.argvars.length() == 0)

        let emitter = new FunctionEmitter(file, [], "", "", "")
        foreach ins of funcdef.body:
            emitter.emit_instruction(ins)
        code = code + """
        void oomph_main(void)
        \{
            {emitter.before_body}
            {emitter.body}
            {emitter.after_body}
        \}
        """

    return "#include <lib/oomph.h>\n" + file.string_defs + code
