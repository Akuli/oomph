func starts_with_any(Str s, List[Str] prefixes) -> Optional[Str]:
    foreach prefix of prefixes:
        if s.starts_with(prefix):
            return prefix
    return null

func get_simple_identifier(Str code) -> Optional[Str]:
    assert(code != "")
    let first_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
    if not first_chars.contains(code.slice(0, 1)):
        return null

    let continue_chars = "{first_chars}1234567890"
    let i = 1
    while i < code.length() and continue_chars.contains(code.slice(i, i+1)):
        i = i + 1
    return code.slice(0, i)

# TODO: enums
# TODO: keep track of line numbers
export class Token(Str type, Str value):
    meth matches(Str type, Str value) -> Bool:
        return self.type == type and self.value == value

func get_int(Str code) -> Str:
    let len = 0
    while len < code.length() and "0123456789".contains(code.slice(len, len+1)):
        len = len+1
    return code.slice(0, len)

func extract_string(Str code, Str quotes) -> Str:
    assert(code.starts_with(quotes))
    let end = quotes.length()

    while true:
        if code.slice(end, code.length()).starts_with(quotes):
            return code.slice(0, end + quotes.length())

        if code.slice(end, code.length()).starts_with("\\"):
            # Skip backslash
            end = end + 1
        # TODO: do,while loop (and just get rid of string weirdness!!...)
        end = end + 1
        while end < code.length() and code.has_continuation_byte_at(end):
            end = end + 1

        if end + quotes.length() > code.length():
            print("string does not terminate: {code}")
            assert(false)  # TODO: error

func raw_tokenize(Str code) -> List[Token]:
    if not code.ends_with("\n"):
        code = code + "\n"

    # Longer ops need to be first, otherwise -> is detect as - and > separate
    let op_list = "-> == != <= >= < > ; , . ( ) [ ] = : + - * / \n".split(" ")

    let result = []
    while code != "":
        let id = get_simple_identifier(code)
        let op = starts_with_any(code, op_list)
        let int_value = get_int(code)

        if id != null:
            if id.get() in ["export", "func", "and", "or", "not"]:
                let token = new Token("keyword", id.get())
            else:
                token = new Token("id", id.get())
        elif op != null:
            token = new Token("op", op.get())
        elif int_value != "":
            let remaining = code.slice(int_value.length(), code.length())
            if remaining.starts_with(".") and remaining != "." and "0123456789".contains(remaining.slice(1, 2)):
                # TODO: remove_prefix method
                let float_value = int_value + "." + get_int(remaining.slice(1, remaining.length()))
                token = new Token("Float", float_value)
            else:
                assert(int_value == "0" or not int_value.starts_with("0"))  # TODO: error
                token = new Token("Int", int_value)
        elif code.starts_with(" "):
            if result != [] and result.last().matches("op", "\n"):
                # Space after newline: indentation
                let indent_level = 0
                while code.slice(indent_level, indent_level + 1) == " ":
                    indent_level = indent_level + 1

                if code.slice(indent_level, indent_level + 1) in ["#", "\n"]:
                    # This line doesn't actually contain any code, ignore the indent
                    code = code.slice(indent_level, code.length())
                    continue

                token = new Token("indent", code.slice(0, indent_level))
            else:
                # Space to be ignored
                # TODO: don't ignore indents in beginning of file
                code = code.slice(1, code.length())
                continue
        elif code.starts_with("#"):
            code = code.slice(code.find_first("\n").get(), code.length())
            continue
        elif code.starts_with("\"\"\""):
            let content = extract_string(code, "\"\"\"")
            token = new Token("string", content)
        # TODO: multiline strings
        elif code.starts_with("\""):
            let content = extract_string(code.split("\n").first(), "\"")
            token = new Token("string", content)
        else:
            print(result)
            print("Invalid syntax: {code}")
            assert(false)  # TODO: error

        assert(code.starts_with(token.value))
        code = code.slice(token.value.length(), code.length())
        result.push(token)

    return result

func skip_newlines(List[Token] tokens):
    while tokens != [] and tokens.last().matches("op", "\n"):
        tokens.pop()

func clean_newlines(List[Token] tokens) -> List[Token]:
    let result = []
    tokens = tokens.reversed()

    skip_newlines(tokens)
    while tokens != []:
        let token = tokens.pop()
        result.push(token)
        if token.matches("op", "\n") or token.type == "begin_block" or token.type == "end_block":
            skip_newlines(tokens)

    return result

func find_blocks(List[Token] tokens) -> List[Token]:
    let indent_level = 0
    let result = []
    tokens = tokens.reversed()

    while tokens != []:
        # TODO: add slice method to lists
        let head = []
        for let i = 0; i < 3; i = i + 1:
            if tokens.length() > i:
                head.push(tokens.get(tokens.length() - 1 - i))

        if head.length() == 3 and head.get(0).matches("op", ":") and head.get(1).matches("op", "\n") and head.get(2).type == "indent":
            indent_level = indent_level + 1
            assert(head.get(2).value == " ".repeat(4*indent_level))  # TODO: error
            result.push(new Token("begin_block", ":"))
            tokens.pop()
            tokens.pop()
            tokens.pop()
            continue

        result.push(head.first())
        tokens.pop()

        if head.first().matches("op", "\n"):
            if head.length() >= 2 and head.get(1).type == "indent":
                let new_level = (head.get(1).value.length() / 4).round()
                assert(head.get(1).value == " ".repeat(4*new_level))  # TODO: error
                tokens.pop()   # skip indent token
            else:
                new_level = 0

            assert(new_level <= indent_level)   # TODO: error
            for ; new_level != indent_level; indent_level = indent_level - 1:
                result.push(new Token("end_block", ""))

    return result

export func tokenize(Str code) -> List[Token]:
    return clean_newlines(find_blocks(clean_newlines(raw_tokenize(code))))
