func starts_with_any(Str s, List[Str] prefixes) -> optional[Str]:
    foreach prefix of prefixes:
        if s.starts_with(prefix):
            return new optional[Str](prefix)
    return null[Str]

func get_simple_identifier(Str code) -> optional[Str]:
    assert(code != "")
    let first_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
    if not first_chars.contains(code.slice(0, 1)):
        return null[Str]

    let continue_chars = "{first_chars}1234567890"
    let i = 1
    while i < code.length() and continue_chars.contains(code.slice(i, i+1)):
        i = i + 1
    return new optional[Str](code.slice(0, i))

# TODO: enums
# TODO: keep track of line numbers
export class Token(Str type, Str value):
    meth matches(Str type, Str value) -> bool:
        return self.type == type and self.value == value

func raw_tokenize(Str code) -> List[Token]:
    let ops = new List[Str]()
    ops.push("(")
    ops.push(")")
    ops.push(":")
    ops.push("\n")

    let result = new List[Token]()
    while code != "":
        let id = get_simple_identifier(code)
        if id != null[Str]:
            if id.get() == "export" or id.get() == "func":
                result.push(new Token("keyword", id.get()))
            else:
                result.push(new Token("id", id.get()))

            code = code.slice(id.get().length(), code.length())
            continue

        let op = starts_with_any(code, ops)
        if op != null[Str]:
            result.push(new Token("op", op.get()))
            code = code.slice(op.get().length(), code.length())
            continue

        if code.starts_with(" "):
            if result.get(result.length() - 1).matches("op", "\n"):
                # Space after newline: indentation
                assert(result.length() != 0)  # TODO: error
                let indent_level = 0
                while code.slice(indent_level, indent_level + 1) == " ":
                    indent_level = indent_level + 1
                result.push(new Token("indent", code.slice(0, indent_level)))
                code = code.slice(indent_level, code.length())
            else:
                # Space to be ignored
                code = code.slice(1, code.length())
            continue

        if code.starts_with("\""):
            # TODO: escapes
            # TODO: error handling
            let content_length = code.slice(1, code.length()).find_first("\"").get()
            let token_length = content_length + 2
            result.push(new Token("string", code.slice(0, token_length)))
            code = code.slice(token_length, code.length())
            continue

        print(result)
        print("Invalid syntax: {code}")
        assert(false)  # TODO: error

    return result

func skip_newlines(List[Token] tokens):
    while tokens.length() != 0 and tokens.get(tokens.length() - 1).matches("op", "\n"):
        print("Skip")
        tokens.pop()

func clean_newlines(List[Token] tokens) -> List[Token]:
    let result = new List[Token]()
    tokens = tokens.reversed()

    skip_newlines(tokens)
    while tokens.length() != 0:
        let token = tokens.pop()
        result.push(token)
        if token.matches("op", "\n") or token.type == "begin_block" or token.type == "end_block":
            skip_newlines(tokens)

    return result

func find_blocks(List[Token] tokens) -> List[Token]:
    let indent_level = 0
    let result = new List[Token]()
    tokens = tokens.reversed()

    while tokens.length() != 0:
        # TODO: add slice method to lists
        let head = new List[Token]()
        for let i = 0; i < 3; i = i + 1:
            if tokens.length() > i:
                head.push(tokens.get(tokens.length() - 1 - i))

        if head.length() == 3 and head.get(0).matches("op", ":") and head.get(1).matches("op", "\n") and head.get(2).type == "indent":
            indent_level = indent_level + 1
            assert(head.get(2).value == " ".repeat(4*indent_level))  # TODO: error
            result.push(new Token("begin_block", ":"))
            tokens.pop()
            tokens.pop()
            tokens.pop()
            continue

        result.push(head.get(0))
        tokens.pop()

        if head.get(0).matches("op", "\n"):
            if head.length() >= 2 and head.get(1).type == "indent":
                let new_level = (head.get(1).value.length() / 4).round()
                assert(head.get(1).value == " ".repeat(4*new_level))  # TODO: error
                tokens.pop()   # skip indent token
            else:
                new_level = 0

            assert(new_level <= indent_level)   # TODO: error
            for ; new_level != indent_level; indent_level = indent_level - 1:
                result.push(new Token("end_block", ""))

    return result

export func tokenize(Str code) -> List[Token]:
    return clean_newlines(find_blocks(clean_newlines(raw_tokenize(code))))
