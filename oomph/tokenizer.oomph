func starts_with_any(Str s, List[Str] prefixes) -> optional[Str]:
    foreach prefix of prefixes:
        if s.starts_with(prefix):
            return new optional[Str](prefix)
    return null[Str]

func get_simple_identifier(Str code) -> optional[Str]:
    assert(code != "")
    let first_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
    if not first_chars.contains(code.slice(0, 1)):
        return null[Str]

    let continue_chars = "{first_chars}1234567890"
    let i = 1
    while i < code.length() and continue_chars.contains(code.slice(i, i+1)):
        i = i + 1
    return new optional[Str](code.slice(0, i))

# TODO: enums
class Token(Str type, Str value):
    meth matches(Str type, Str value) -> bool:
        return self.type == type and self.value == value

export func tokenize(Str code):
    let ops = new List[Str]()
    ops.push("(")
    ops.push(")")
    ops.push(":")
    ops.push("\n")

    let result = new List[Token]()
    while code != "":
        let id = get_simple_identifier(code)
        if id != null[Str]:
            if id.get() == "export" or id.get() == "func":
                result.push(new Token("keyword", id.get()))
            else:
                result.push(new Token("id", id.get()))

            code = code.slice(id.get().length(), code.length())
            continue

        let op = starts_with_any(code, ops)
        if op != null[Str]:
            result.push(new Token("op", op.get()))
            code = code.slice(op.get().length(), code.length())
            continue

        if code.starts_with(" "):
            if result.get(result.length() - 1).matches("op", "\n"):
                # Space after newline: indentation
                assert(result.length() != 0)  # TODO: error
                let indent_level = 0
                while code.slice(indent_level, indent_level + 1) == " ":
                    indent_level = indent_level + 1
                result.push(new Token("indent", code.slice(0, indent_level)))
                code = code.slice(indent_level, code.length())
            else:
                # Space to be ignored
                code = code.slice(1, code.length())
            continue

        if code.starts_with("\""):
            # TODO: escapes
            # TODO: error handling
            let content_length = code.slice(1, code.length()).find_first("\"").get()
            let token_length = content_length + 2
            result.push(new Token("string", code.slice(0, token_length)))
            code = code.slice(token_length, code.length())
            continue

        print(result)
        print("Invalid syntax: {code}")
        assert(false)  # TODO: error

    print("Success: {result}")
