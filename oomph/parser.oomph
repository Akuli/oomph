import "ast.oomph" as ast
import "tokenizer.oomph" as tokenizer
import "util.oomph" as util

union PrecedenceItem:
    ast::Expression
    Str

# TODO: add a convenient way to do this without util funcs
func get_expr(PrecedenceItem item) -> ast::Expression:
    switch item:
        case ast::Expression expr:
            return expr
        case *:
            assert(false)
func get_op(PrecedenceItem item) -> Str:
    switch item:
        case Str op:
            return op
        case *:
            assert(false)

# TODO: more list methods
func delete_slice_from_list(List[PrecedenceItem] list, Int start, Int end) -> List[PrecedenceItem]:
    let stack = new List[PrecedenceItem]()
    let result = new List[PrecedenceItem]()
    while list.length() > end:
        stack.push(list.pop())
    while list.length() > start:
        result.push(list.pop())
    list.push_all(stack.reversed())
    return result.reversed()

func insert_to_list(List[PrecedenceItem] list, Int index, PrecedenceItem item):
    let stack = new List[PrecedenceItem]()
    while list.length() > index:
        stack.push(list.pop())
    list.push(item)
    list.push_all(stack.reversed())

# TODO: more implicit conversions to avoid this
func cast(ast::Expression arg) -> ast::Expression:
    return arg

# tokens must be in reverse order
class Parser(List[tokenizer::Token] tokens):
    meth peek() -> tokenizer::Token:
        assert(self.tokens.length() != 0)  # TODO: error
        return self.tokens.last()

    meth get_token_by_type(Str type) -> tokenizer::Token:
        self.peek()   # Error if end of file
        let token = self.tokens.pop()
        if token.type != type:
            # TODO: error
            print("Wrong token type: expected {type}, got {token.type}")
            assert(token.type == type)  # TODO: error
        return token

    meth get_token(Str type, Str value) -> tokenizer::Token:
        let token = self.get_token_by_type(type)
        if token.value != value:
            # TODO: error
            print("Expected '{value}', got '{token.value}'")
            assert(false)
        return token

    meth parse_simple_expression() -> ast::Expression:
        if self.peek().type == "string":
            let string = self.get_token_by_type("string").value
            assert(string.starts_with("\""))
            assert(string.ends_with("\""))
            let result = cast(new ast::StringConstant(string.slice(1, string.length() - 1)))
        elif self.peek().type == "id":
            result = cast(new ast::GetVar(self.get_token_by_type("id").value))
        elif self.peek().type == "Int":
            result = cast(new ast::IntConstant(self.get_token_by_type("Int").value.to_int()))
        elif self.peek().type == "Float":
            result = cast(new ast::FloatConstant(self.get_token_by_type("Float").value))
        elif self.peek().matches("op", "("):
            self.get_token("op", "(")
            result = self.parse_expression()
            self.get_token("op", ")")
        else:
            print("Don't know what to do: {self.peek()}")
            assert(false)

        while self.tokens.length() != 0 and self.peek().matches("op", "("):
            self.get_token("op", "(")
            let args = new List[ast::Expression]()
            if not self.peek().matches("op", ")"):
                args.push(self.parse_expression())
                while self.peek().matches("op", ","):
                    self.get_token("op", ",")
                    args.push(self.parse_expression())
            self.get_token("op", ")")
            result = cast(new ast::Call(result, args))

        return result

    # TODO: this should not be as difficult as it is
    meth find_binary_operator(List[PrecedenceItem] magic_list, List[Str] operators) -> Optional[Int]:
        for let i = 0; i <= magic_list.length() - 3; i = i+1:
            switch magic_list.get(i):
                case ast::Expression expr:
                    pass
                case *:
                    continue
            switch magic_list.get(i+1):
                case Str s:
                    if not util::list_contains(operators, s):
                        continue
                case *:
                    continue
            switch magic_list.get(i+2):
                case ast::Expression expr:
                    pass
                case *:
                    continue
            return new Optional[Int](i)
        return new Optional[Int](null)

    meth eliminate_operators(List[PrecedenceItem] magic_list, List[Str] operators):
        while magic_list.length() >= 2:
            switch magic_list.first():
                case Str op:
                    if util::list_contains(operators, op):
                        # Unary operation
                        let expr = get_expr(magic_list.get(1))
                        delete_slice_from_list(magic_list, 0, 2)
                        insert_to_list(magic_list, 0, new ast::UnaryOperator(op, expr))
                        continue
                case *:
                    pass

            let i_or_null = self.find_binary_operator(magic_list, operators)
            if i_or_null != null:
                let i = i_or_null.get()
                let lhs_op_rhs = delete_slice_from_list(magic_list, i, i+3)
                let lhs = get_expr(lhs_op_rhs.first())
                let op = get_op(lhs_op_rhs.get(1))
                let rhs = get_expr(lhs_op_rhs.last())
                insert_to_list(magic_list, i, new ast::BinaryOperator(lhs, op, rhs))
                continue

            break

    meth parse_expression() -> ast::Expression:
        let ops = ["+", "-", "*", "/"]

        let magic_list = new List[PrecedenceItem]()
        if self.peek().type == "op" and util::list_contains(ops, self.peek().value):
            magic_list.push(self.get_token_by_type("op").value)
        magic_list.push(self.parse_simple_expression())
        while self.peek().type == "op" and util::list_contains(ops, self.peek().value):
            magic_list.push(self.get_token_by_type("op").value)
            magic_list.push(self.parse_simple_expression())

        self.eliminate_operators(magic_list, ["*", "/"])
        self.eliminate_operators(magic_list, ["+", "-"])

        assert(magic_list.length() == 1)
        switch magic_list.first():
            case ast::Expression expr:
                return expr
            case *:
                assert(false)

    meth parse_statement() -> ast::Call:
        switch self.parse_expression():
            case ast::Call call:
                self.get_token("op", "\n")
                return call
            case *:
                assert(false)  # TODO: error

    meth parse_block_of_statements() -> List[ast::Call]:
        let result = new List[ast::Call]()
        self.get_token_by_type("begin_block")
        while self.tokens.length() != 0 and self.peek().type != "end_block":
            result.push(self.parse_statement())
        self.get_token_by_type("end_block")
        return result

    meth parse_function() -> ast::FuncDef:
        self.get_token("keyword", "export")
        self.get_token("keyword", "func")
        let name = self.get_token_by_type("id").value
        self.get_token("op", "(")
        self.get_token("op", ")")
        return new ast::FuncDef(name, new List[ast::FuncDefArgument](), null, self.parse_block_of_statements())

export func parse_file(Str code) -> List[ast::FuncDef]:
    let parser = new Parser(tokenizer::tokenize(code).reversed())
    let result = new List[ast::FuncDef]()
    while parser.tokens.length() != 0:
        result.push(parser.parse_function())
    return result
