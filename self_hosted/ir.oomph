import "location.oomph" as location
typedef Location = location::Location

export typedef Type = AutoType | BasicType | FunctionType | UnionType

export class AutoType(Int id)

# TODO: better way to make constants similar to null, true, false
export class NoReturn():
    meth equals(NoReturn other) -> Bool:
        return true
    meth hash() -> Int:
        return 123

export class FunctionType(List[Type] argtypes, Type | null | NoReturn returntype):
    meth equals(FunctionType other) -> Bool:
        return self.argtypes == other.argtypes and self.returntype == other.returntype

    meth hash() -> Int:
        # TODO: this is not ideal
        return self.returntype.hash()

    meth skip_self() -> FunctionType:
        assert(self.argtypes != [])
        return new FunctionType(self.argtypes.slice(1, self.argtypes.length()), self.returntype)

export class Generic(Str name)
export class GenericSource(Generic generik, List[Type] args):
    # TODO: some kind of handy way to say "do equality checks by value"
    # TODO: this equals method still needed?
    meth equals(GenericSource other) -> Bool:
        return self.generik == other.generik and self.args == other.args

export class BasicType(
    Str name,
    Bool refcounted,
    Mapping[Str, FunctionType] methods,
    Mapping[Str, Type] members,
    List[Type] | null constructor_argtypes,
    GenericSource | null generic_source,
    Str | null definition_path,  # null for builtin
    List[Str] methods_to_create,
):
    # Helps with reference cycles
    meth to_string() -> Str:
        return "<BasicType: {self.name}>"

    meth equals(BasicType other) -> Bool:
        if self.generic_source == null and other.generic_source == null:
            return (self.name == other.name and self.definition_path == other.definition_path)
        else:
            return (self.generic_source == other.generic_source)

    meth hash() -> Int:
        switch self.generic_source:
            case null _:
                # can rely on name
                return self.name.hash()
            case GenericSource s:
                return s.generik.hash()


export class UnionType(
    List[Type] type_members,
    Str | null custom_name,   # can be set after creating
    Builtins builtins,  # TODO: this sucks
):
    # Helps with reference cycles
    meth to_string() -> Str:
        return "<UnionType {type_name(self)}: custom_name={self.custom_name}>"

    meth equals(UnionType other) -> Bool:
        return self.type_members == other.type_members

    meth hash() -> Int:
        let result = 0
        foreach member of self.type_members:
            # TODO: xor or list hash
            result = result + member.hash()
        return result


export func make_union(
    Builtins builtins,
    List[Type] type_members,
    Location | null location,
) -> UnionType:
    let flattened = []
    foreach member of type_members:
        switch member:
            case UnionType union:
                flattened.push_all(union.type_members)
            case *:
                flattened.push(member)

    assert(flattened.length() >= 2)

    # check no duplicates
    for let i = 0; i < flattened.length(); i = i+1:
        if flattened.get(i) in flattened.slice(0, i):
            (location as not null).error(
                "repeated union member '{type_name(flattened.get(i))}'"
            )

    # FIXME: sort the type members consistently

    return new UnionType(flattened, null, builtins)


export func is_refcounted(Type type) -> Bool:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            return basictype.refcounted
        case FunctionType | UnionType _:
            return true


export func get_constructor_argtypes(Type type) -> List[Type] | null:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            return basictype.constructor_argtypes
        case FunctionType | UnionType _:
            return null

export func type_name(Type type) -> Str:
    switch type:
        case AutoType autotype:
            return "auto{autotype.id}"
        case BasicType basic:
            return basic.name
        case FunctionType functype:
            let arg_string = [foreach t of functype.argtypes: type_name(t)].join(", ")
            switch functype.returntype:
                case NoReturn _:
                    return "func({arg_string}) -> noreturn"
                case null _:
                    return "func({arg_string})"
                case Type returntype:
                    return "func({arg_string}) -> {type_name(returntype)}"
        case UnionType union:
            if union.custom_name == null:
                let parts = []
                foreach member of union.type_members:
                    # Parenthesize function types, e.g. (func() -> Int) | (func() -> Str)
                    switch member:
                        case FunctionType functype:
                            parts.push("(" + type_name(functype) + ")")
                        case *:
                            parts.push(type_name(member))
                return parts.join(" | ")
            return union.custom_name as not null

export func type_id_string(Type type) -> Str:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            if basictype.generic_source == null:
                return basictype.name + "@" + basictype.definition_path.to_string()
            let source = basictype.generic_source as not null
            return source.generik.name + [foreach arg of source.args: type_id_string(arg)].join(",")
        case UnionType union:
            return [foreach m of union.type_members: type_id_string(m)].join("|")
        case FunctionType functype:
            switch functype.returntype:
                case Type returntype:
                    let return_id = type_id_string(returntype)
                case null _:
                    return_id = "null"
                case NoReturn _:
                    return_id = "noreturn"
            let arg_string = [foreach arg of functype.argtypes: type_id_string(arg)].join(",")
            return "({arg_string}->{return_id})"

export func get_generic_source(Type type) -> GenericSource | null:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            return basictype.generic_source
        case FunctionType | UnionType _:
            return null


export typedef Variable = BuiltinVariable | FileVariable | LocalVariable
export class BuiltinVariable(Str name, Type type)
export class FileVariable(Str name, Type type)
export class LocalVariable(Type type, Int id, Location location)

# TODO: this sucks
export func var_type(Variable var) -> Type:
    switch var:
        case BuiltinVariable builtin_var:
            return builtin_var.type
        case FileVariable file_var:
            return file_var.type
        case LocalVariable local_var:
            return local_var.type


# TODO: global (but const) variables
export class Builtins(
    Type BOOL,
    Type FLOAT,
    Type INT,
    Type NULL_TYPE,
    Type STR,
    Generic LIST,
    Generic MAPPING,
    Generic MAPPING_ITEM,
    Mapping[Str, BuiltinVariable] visible_vars,
    Mapping[Str, BuiltinVariable] hidden_vars,
    List[BasicType] cleanup_list,
):
    meth destroy():
        # get rid of reference cycles
        foreach type of self.cleanup_list:
            type.methods = new Mapping[Str, FunctionType]()
            type.members = new Mapping[Str, Type]()
            type.constructor_argtypes = null as List[Type] | null

    meth get_builtin_types() -> List[Type]:
        return [self.BOOL, self.FLOAT, self.INT, self.NULL_TYPE, self.STR]

    meth get_builtin_generics() -> Mapping[Str, Generic]:
        let result = new Mapping[Str, auto]()
        result.set("List", self.LIST)
        result.set("Mapping", self.MAPPING)
        return result

    # TODO: this is in a weird place
    meth generic2type(Generic generik, List[Type] args, List[Location] | null arg_locations) -> Type:
        if arg_locations != null:
            assert((arg_locations as not null).length() == args.length())

        let source = new GenericSource(generik, args)
        let result = new BasicType(
            generik.name + "[" + [foreach arg of args: type_name(arg)].join(", ") + "]",
            true,
            new Mapping[Str, auto](),
            new Mapping[Str, auto](),
            new List[Type](),  # FIXME: [] doesn't work
            new GenericSource(generik, args),
            null,
            [],
        )
        let r = result as Type  # TODO: get rid of this

        if generik == self.LIST:
            let arg = args.only()   # TODO: error
            result.methods.set("__contains", new FunctionType([r, arg], self.BOOL))  # TODO: hide?
            result.methods.set("copy", new FunctionType([r], r))
            result.methods.set("delete_at_index", new FunctionType([r, self.INT], arg))
            result.methods.set("delete_first", new FunctionType([r, arg], null))
            result.methods.set("delete_last", new FunctionType([r, arg], null))
            result.methods.set("delete_only", new FunctionType([r, arg], null))
            result.methods.set("delete_slice", new FunctionType([r, self.INT, self.INT], r))
            result.methods.set("ends_with", new FunctionType([r, r], self.BOOL))
            result.methods.set("equals", new FunctionType([r, r], self.BOOL))
            result.methods.set("find_first", new FunctionType([r, arg], self.INT))
            result.methods.set("find_last", new FunctionType([r, arg], self.INT))
            result.methods.set("find_only", new FunctionType([r, arg], self.INT))
            result.methods.set("first", new FunctionType([r], arg))
            result.methods.set("get", new FunctionType([r, self.INT], arg))
            result.methods.set("insert", new FunctionType([r, self.INT, arg], null))
            result.methods.set("last", new FunctionType([r], arg))
            result.methods.set("length", new FunctionType([r], self.INT))
            result.methods.set("only", new FunctionType([r], arg))
            result.methods.set("pop", new FunctionType([r], arg))
            result.methods.set("push", new FunctionType([r, arg], null))
            result.methods.set("push_all", new FunctionType([r, r], null))
            result.methods.set("reversed", new FunctionType([r], r))
            result.methods.set("set", new FunctionType([r, self.INT, arg], arg))
            result.methods.set("slice", new FunctionType([r, self.INT, self.INT], r))
            result.methods.set("starts_with", new FunctionType([r, r], self.BOOL))
            result.methods.set("to_string", new FunctionType([r], self.STR))
            # TODO: this is only for strings, but List[auto] may become List[Str] later
            # if arg is STR:
            result.methods.set("join", new FunctionType([r, self.STR], self.STR))

        elif generik == self.MAPPING:
            assert(args.length() == 2)   # TODO: error
            let keytype = args.first()
            let valtype = args.last()
            let itemlist = self.generic2type(
                self.LIST, [self.generic2type(self.MAPPING_ITEM, args, null)], null
            )

            if not get_methods(keytype, self).has_key("hash"):
                (arg_locations as not null).first().error(
                    "mapping key type must be hashable, but "
                    + "{type_name(keytype)} doesn't have a .hash() method"
                )

            result.methods.set("copy", new FunctionType([r], r))
            result.methods.set("delete", new FunctionType([r, keytype], null))
            result.methods.set("equals", new FunctionType([r, r], self.BOOL))
            result.methods.set("get", new FunctionType([r, keytype], valtype))
            result.methods.set("has_key", new FunctionType([r, keytype], self.BOOL))
            result.methods.set("items", new FunctionType([r], itemlist))
            result.methods.set("keys", new FunctionType([r], self.generic2type(self.LIST, [keytype], null)))
            result.methods.set("length", new FunctionType([r], self.INT))
            result.methods.set("set", new FunctionType([r, keytype, valtype], null))
            result.methods.set("to_string", new FunctionType([r], self.STR))
            result.methods.set("values", new FunctionType([r], self.generic2type(self.LIST, [valtype], null)))

        elif generik == self.MAPPING_ITEM:
            assert(args.length() == 2)
            let keytype = args.first()
            let valtype = args.last()
            result.members.set("key", keytype)
            result.members.set("value", valtype)
            result.methods.set("equals", new FunctionType([r, r], self.BOOL))
            result.methods.set("to_string", new FunctionType([r], self.STR))

        else:
            assert(false)

        self.cleanup_list.push(result)
        return result


# TODO: custom constructors
func create_basic_type(Str name, Bool refcounted) -> Type:
    return new BasicType(name, refcounted, new Mapping[Str, auto](), new Mapping[Str, auto](), null, null, null, [])

export func create_builtins() -> Builtins:
    # Methods are empty at first to prevent reference cycles
    let BOOL = create_basic_type("Bool", false)
    let FLOAT = create_basic_type("Float", false)
    let INT = create_basic_type("Int", false)
    let NULL_TYPE = create_basic_type("null", false)
    let STR = create_basic_type("Str", true)

    let LIST = new Generic("List")
    let MAPPING = new Generic("Mapping")
    let MAPPING_ITEM = new Generic("MappingItem")

    let visible_vars = new Mapping[Str, auto]()
    let hidden_vars = new Mapping[Str, auto]()

    let result = new Builtins(
        BOOL, FLOAT, INT, NULL_TYPE, STR,
        LIST, MAPPING, MAPPING_ITEM,
        visible_vars, hidden_vars,
        [],
    )
    result.cleanup_list.push_all([foreach t of result.get_builtin_types(): t as BasicType])

    foreach var of [
        new BuiltinVariable("bool_eq", new FunctionType([BOOL, BOOL], BOOL)),
        new BuiltinVariable("bool_not", new FunctionType([BOOL], BOOL)),
        new BuiltinVariable("float_add", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_div", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_eq", new FunctionType([FLOAT, FLOAT], BOOL)),
        new BuiltinVariable("float_gt", new FunctionType([FLOAT, FLOAT], BOOL)),
        new BuiltinVariable("float_mod", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_mul", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_neg", new FunctionType([FLOAT], FLOAT)),
        new BuiltinVariable("float_sub", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("int2float", new FunctionType([INT], FLOAT)),
        new BuiltinVariable("int_add", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_eq", new FunctionType([INT, INT], BOOL)),
        new BuiltinVariable("int_gt", new FunctionType([INT, INT], BOOL)),
        new BuiltinVariable("int_mod", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_mul", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_neg", new FunctionType([INT], INT)),
        new BuiltinVariable("int_sub", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("string_concat", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("string_eq", new FunctionType([STR, STR], BOOL)),
    ]:
        hidden_vars.set(var.name, var)

    foreach var of [
        new BuiltinVariable("__argv_count", new FunctionType([], INT)),
        new BuiltinVariable("__argv_get", new FunctionType([INT], STR)),
        new BuiltinVariable("__exit", new FunctionType([INT], new NoReturn())),
        new BuiltinVariable("__get_first_char", new FunctionType([STR], STR)),
        new BuiltinVariable("__get_utf8_byte", new FunctionType([STR, INT], INT)),
        new BuiltinVariable("__hash", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__io_delete", new FunctionType([STR], null)),
        new BuiltinVariable("__io_mkdir", new FunctionType([STR], null)),
        new BuiltinVariable("__io_read_file", new FunctionType([STR], STR)),
        new BuiltinVariable("__io_write_file", new FunctionType([STR, STR], null)),
        new BuiltinVariable("__remove_prefix", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__remove_suffix", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__run_at_exit", new FunctionType([new FunctionType([], null) as Type], null)),
        new BuiltinVariable("__run_subprocess", new FunctionType([result.generic2type(LIST, [STR], null)], INT)),
        new BuiltinVariable("__slice_until_substring", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__utf8_len", new FunctionType([STR], INT)),
        new BuiltinVariable("assert", new FunctionType([BOOL, STR, INT], null)),
        new BuiltinVariable("false", BOOL),
        new BuiltinVariable("null", NULL_TYPE),
        new BuiltinVariable("print", new FunctionType([STR], null)),
        new BuiltinVariable("true", BOOL),
    ]:
        visible_vars.set(var.name, var)

    (FLOAT as BasicType).methods.set("ceil", new FunctionType([FLOAT], INT))
    (FLOAT as BasicType).methods.set("equals", new FunctionType([FLOAT, FLOAT], BOOL))
    (FLOAT as BasicType).methods.set("floor", new FunctionType([FLOAT], INT))
    (FLOAT as BasicType).methods.set("round", new FunctionType([FLOAT], INT))
    (FLOAT as BasicType).methods.set("to_string", new FunctionType([FLOAT], STR))
    (FLOAT as BasicType).methods.set("truncate", new FunctionType([FLOAT], INT))

    (STR as BasicType).methods.set("__contains", new FunctionType([STR, STR], BOOL))
    (STR as BasicType).methods.set("center_pad", new FunctionType([STR, INT, STR], STR))
    (STR as BasicType).methods.set("count", new FunctionType([STR, STR], INT))
    (STR as BasicType).methods.set("ends_with", new FunctionType([STR, STR], BOOL))
    (STR as BasicType).methods.set("equals", new FunctionType([STR, STR], BOOL))
    (STR as BasicType).methods.set("get_utf8", new FunctionType([STR], result.generic2type(LIST, [INT], null)))
    (STR as BasicType).methods.set("left_pad", new FunctionType([STR, INT, STR], STR))
    (STR as BasicType).methods.set("left_trim", new FunctionType([STR], STR))
    (STR as BasicType).methods.set("length", new FunctionType([STR], INT))
    (STR as BasicType).methods.set("hash", new FunctionType([STR], INT))
    (STR as BasicType).methods.set("remove_prefix", new FunctionType([STR, STR], STR))
    (STR as BasicType).methods.set("remove_suffix", new FunctionType([STR, STR], STR))
    (STR as BasicType).methods.set("repeat", new FunctionType([STR, INT], STR))
    (STR as BasicType).methods.set("replace", new FunctionType([STR, STR, STR], STR))
    (STR as BasicType).methods.set("right_pad", new FunctionType([STR, INT, STR], STR))
    (STR as BasicType).methods.set("right_trim", new FunctionType([STR], STR))
    (STR as BasicType).methods.set("split", new FunctionType([STR, STR], result.generic2type(LIST, [STR], null)))
    (STR as BasicType).methods.set("starts_with", new FunctionType([STR, STR], BOOL))
    (STR as BasicType).methods.set("to_float", new FunctionType([STR], FLOAT))
    (STR as BasicType).methods.set("to_int", new FunctionType([STR], INT))
    (STR as BasicType).methods.set("to_string", new FunctionType([STR], STR))  # does nothing
    (STR as BasicType).methods.set("trim", new FunctionType([STR], STR))

    (BOOL as BasicType).methods.set("equals", new FunctionType([BOOL, BOOL], BOOL))
    (BOOL as BasicType).methods.set("hash", new FunctionType([BOOL], INT))
    (BOOL as BasicType).methods.set("to_string", new FunctionType([BOOL], STR))

    (INT as BasicType).methods.set("equals", new FunctionType([INT, INT], BOOL))
    (INT as BasicType).methods.set("hash", new FunctionType([INT], INT))
    (INT as BasicType).methods.set("to_string", new FunctionType([INT], STR))

    (NULL_TYPE as BasicType).methods.set("equals", new FunctionType([NULL_TYPE, NULL_TYPE], BOOL))
    (NULL_TYPE as BasicType).methods.set("hash", new FunctionType([NULL_TYPE], INT))
    (NULL_TYPE as BasicType).methods.set("to_string", new FunctionType([NULL_TYPE], STR))

    return result

# TODO: stdlib?
func all(List[Bool] things) -> Bool:
    foreach thing of things:
        if not thing:
            return false
    return true

export func get_methods(Type type, Builtins builtins) -> Mapping[Str, FunctionType]:
    switch type:
        case AutoType _:
            assert(false)

        case BasicType basictype:
            let result = basictype.methods.copy()
            foreach addition of basictype.methods_to_create:
                if addition == "to_string":
                    result.set("to_string", new FunctionType([type], builtins.STR))
                elif addition == "equals":
                    result.set("equals", new FunctionType([type, type], builtins.BOOL))
                elif addition == "hash":
                    result.set("hash", new FunctionType([type], builtins.INT))
                else:
                    assert(false)
            return result

        case FunctionType _:
            return new Mapping[Str, auto]()

        case UnionType union:
            let result = new Mapping[Str, auto]()
            result.set("equals", new FunctionType([type, type], builtins.BOOL))
            result.set("to_string", new FunctionType([type], builtins.STR))
            if all([
                foreach t of union.type_members: get_methods(t, builtins).has_key("hash")
            ]):
                result.set("hash", new FunctionType([type], builtins.INT))
            return result

export func get_method(Type type, Str name, Builtins builtins, Location | null location) -> FunctionType:
    let methods = get_methods(type, builtins)
    if methods.has_key(name):
        return methods.get(name)
    (location as not null).error("type '{type_name(type)}' has no method named '{name}'")

export func get_member(Type type, Str name, Location | null location) -> Type:
    switch type:
        case AutoType a:
            assert(false)
        case BasicType basictype:
            let members = basictype.members
        case *:
            members = new Mapping[Str, auto]()

    if members.has_key(name):
        return members.get(name)
    (location as not null).error("type '{type_name(type)}' has no member named '{name}'")


export typedef Instruction = (
    ConstructorCall
    | DecRef
    | FloatConstant
    | FunctionCall
    | GetAttribute
    | GetFromUnion
    | GetMethod
    | GotoIf
    | GotoLabel
    | IncRef
    | InstantiateUnion
    | IntConstant
    | MethodCall
    | Panic
    | Return
    | SetAttribute
    | StringConstant
    | UnSet
    | UnionMemberCheck
    | VarCpy
)
export class ConstructorCall(LocalVariable result, List[LocalVariable] args)
export class DecRef(LocalVariable var)
export class FloatConstant(Str value, LocalVariable var)
export class FunctionCall(Variable function, List[LocalVariable] args, LocalVariable | null result)
export class GetAttribute(LocalVariable obj, LocalVariable attribute_var, Str attribute)
export class GetFromUnion(LocalVariable result, LocalVariable union_var)
export class GetMethod(LocalVariable obj, LocalVariable method_var, Str method)
export class GotoIf(GotoLabel label, LocalVariable cond)
export class GotoLabel(Int id)
export class IncRef(LocalVariable var)
export class InstantiateUnion(LocalVariable result, LocalVariable value)
export class IntConstant(Int value, LocalVariable var)
export class MethodCall(LocalVariable obj, Str method_name, List[LocalVariable] args, LocalVariable | null result, Location location)
export class Panic(Str message, Location location)
export class Return(LocalVariable | null value)
export class SetAttribute(LocalVariable obj, Str attribute, LocalVariable attribute_var)
export class StringConstant(Str value, LocalVariable var)
export class UnSet(LocalVariable var)
export class UnionMemberCheck(LocalVariable result, LocalVariable union_var, Type member_type)
export class VarCpy(LocalVariable dest, Variable source)  # same argument order as memcpy

export typedef ToplevelDeclaration = FuncDef | MethodDef
export class FuncDef(FileVariable var, List[LocalVariable] argvars, List[Instruction] body)
export class MethodDef(Str name, FunctionType type, List[LocalVariable] argvars, List[Instruction] body)

# Symbol represents anything that might need to be shared between different .c files
export typedef SymbolValue = FileVariable | Type
export class Symbol(Str path, Str name, SymbolValue value)
