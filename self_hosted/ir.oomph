import "error.oomph" as error

export typedef Type = AutoType | BasicType | FunctionType | UnionType

export class AutoType(Int id)

# FIXME: missing equals method
export class FunctionType(List[Type] argtypes, Type | null returntype)

# TODO: mappings
export class Method(Str name, FunctionType functype)
export class Member(Str name, Type type)

export class Generic(Str name)
export class GenericSource(Generic generik, Type arg):
    # TODO: some kind of handy way to say "do equality checks by value"
    meth equals(GenericSource other) -> Bool:
        return self.generik == other.generik and self.arg == other.arg

export class BasicType(
    # TODO: definition path
    Str name,
    Bool refcounted,
    List[Method] methods,  # TODO: get rid of this
    List[Member] members,  # TODO: get rid of this
    List[Type] | null constructor_argtypes,
    GenericSource | null generic_source,
    Bool create_to_string_method,
):
    # Helps with reference cycles
    meth to_string() -> Str:
        return "<BasicType: {self.name}>"

    meth equals(BasicType other) -> Bool:
        let result = (
            self.name == other.name
            # FIXME: and self.definition_path == other.definition_path
            and self.generic_source == other.generic_source
        )
        return result


export class UnionType(
    List[Type] type_members,
    Str | null custom_name,
    Builtins builtins,  # TODO: this sucks
):
    # Helps with reference cycles
    meth to_string() -> Str:
        return "<UnionType: custom_name={self.custom_name}>"

    meth equals(UnionType other) -> Bool:
        return self.type_members == other.type_members


export func make_union(
    Builtins builtins,
    List[Type] type_members,
    error::Location location,
) -> UnionType:
    type_members = type_members.reversed().reversed()   # TODO: better way to copy list

    # check no duplicates
    for let i = 0; i < type_members.length(); i = i+1:
        if type_members.get(i) in type_members.slice(0, i):
            location.error("repeated union member '{type_name(type_members.get(i))}'")

    # FIXME: sort the type members consistently

    if builtins.NULL_TYPE in type_members:
        type_members.delete_only(builtins.NULL_TYPE)
        type_members.insert(0, builtins.NULL_TYPE)

    return new UnionType(type_members, null, builtins)


export func is_refcounted(Type type) -> Bool:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            return basictype.refcounted
        case FunctionType functype:
            return false
        case UnionType _:
            return true


export func get_constructor_argtypes(Type type) -> List[Type] | null:
    switch type:
        case AutoType autotype:
            assert(false)
        case BasicType basictype:
            return basictype.constructor_argtypes
        case FunctionType functype:
            return null
        case UnionType uniontype:
            # Special-cased in ast2ir because multiple possibilities
            # TODO: rely on implicit conversions and return [type] maybe?
            assert(false)

export func type_name(Type type) -> Str:
    switch type:
        case AutoType autotype:
            return "auto{autotype.id}"
        case BasicType basic:
            return basic.name
        case FunctionType functype:
            return "<function type>"
        case UnionType union:
            # Don't use custom names for 'Foo | null'
            if union.custom_name == null or (
                union.type_members.length() == 2
                and union.type_members.first() == union.builtins.NULL_TYPE
            ):
                return "(" + [
                    foreach t of union.type_members: type_name(t)
                ].join(" | ") + ")"
            return union.custom_name.get()

export func type_id_string(Type type) -> Str:
    switch type:
        case AutoType _:
            assert(false)
        case BasicType basictype:
            if basictype.generic_source == null:
                # FIXME: return self.name + str(self.definition_path)
                return basictype.name
            let source = basictype.generic_source.get()
            return source.generik.name + type_id_string(source.arg)
        case UnionType union:
            return [foreach m of union.type_members: type_id_string(m)].join("|")
        case FunctionType functype:
            assert(false)   # TODO

export func get_generic_source(Type type) -> GenericSource | null:
    switch type:
        case AutoType autotype:
            assert(false)
        case BasicType basictype:
            return basictype.generic_source
        case FunctionType functype:
            return null
        case UnionType uniontype:
            return null


export typedef Variable = BuiltinVariable | FileVariable | LocalVariable
export class BuiltinVariable(Str name, Type type)
export class FileVariable(Str name, Type type)
export class LocalVariable(Type type, Int id, error::Location location)

# TODO: this sucks
export func var_type(Variable var) -> Type:
    switch var:
        case BuiltinVariable builtin_var:
            return builtin_var.type
        case FileVariable file_var:
            return file_var.type
        case LocalVariable local_var:
            return local_var.type


# TODO: global (but const) variables
export class Builtins(
    Type BOOL,
    Type FLOAT,
    Type INT,
    Type NULL_TYPE,
    Type STR,
    Generic LIST,
    List[BuiltinVariable] visible_vars,
    List[BuiltinVariable] hidden_vars,
    List[Type] cleanup_list,
):
    meth destroy():
        # get rid of reference cycles
        # TODO: syntax sucks
        foreach type of self.cleanup_list:
            # TODO: 'thing.methods = []' doesn't work
            while (type as BasicType).methods != []:
                (type as BasicType).methods.pop()

    meth get_visible_var(Str name) -> BuiltinVariable:
        foreach var of self.visible_vars:
            if var.name == name:
                return var
        print("variable {name} not found")
        assert(false)

    meth get_hidden_var(Str name) -> BuiltinVariable:
        foreach var of self.hidden_vars:
            if var.name == name:
                return var
        print("INTERNAL ERROR: hidden variable {name} not found")
        assert(false)

    meth get_builtin_types() -> List[Type]:
        return [self.BOOL, self.FLOAT, self.INT, self.NULL_TYPE, self.STR]

    # TODO: this is in a weird place
    meth generic2type(Generic generik, Type arg) -> Type:
        let source = new GenericSource(generik, arg)
        assert(generik == self.LIST)

        let methods = []
        let result = new BasicType(
            "List[{type_name(arg)}]",
            true,
            methods,
            [],
            new List[Type](),  # FIXME: [] doesn't work
            new GenericSource(generik, arg),
            false,
        )
        let r = new Type(result)  # TODO: get rid of this
        methods.push_all([
            new Method("__contains", new FunctionType([r, arg], self.BOOL)),  # TODO: hide?
            new Method("delete_at_index", new FunctionType([r, self.INT], arg)),
            new Method("delete_first", new FunctionType([r, arg], null)),
            new Method("delete_first", new FunctionType([r, arg], null)),
            new Method("delete_only", new FunctionType([r, arg], null)),
            new Method("delete_slice", new FunctionType([r, self.INT, self.INT], r)),
            new Method("ends_with", new FunctionType([r, r], self.BOOL)),
            new Method("equals", new FunctionType([r, r], self.BOOL)),
            new Method("find_first", new FunctionType([r, arg], self.INT)),
            new Method("find_last", new FunctionType([r, arg], self.INT)),
            new Method("find_only", new FunctionType([r, arg], self.INT)),
            new Method("first", new FunctionType([r], arg)),
            new Method("get", new FunctionType([r, self.INT], arg)),
            new Method("insert", new FunctionType([r, self.INT, arg], null)),
            new Method("last", new FunctionType([r], arg)),
            new Method("length", new FunctionType([r], self.INT)),
            new Method("pop", new FunctionType([r], arg)),
            new Method("push", new FunctionType([r, arg], null)),
            new Method("push_all", new FunctionType([r, r], null)),
            new Method("reversed", new FunctionType([r], r)),
            new Method("slice", new FunctionType([r, self.INT, self.INT], r)),
            new Method("starts_with", new FunctionType([r, r], self.BOOL)),
            new Method("to_string", new FunctionType([r], self.STR)),
            # TODO: this is only for strings, but List[auto] may become List[Str] later
            # if arg is STR:
            new Method("join", new FunctionType([r, self.STR], self.STR)),
        ])
        self.cleanup_list.push(result)
        return result


# TODO: custom constructors
export func create_builtins() -> Builtins:
    # Methods are empty and special to prevent reference cycles
    let BOOL = new Type(new BasicType("Bool", false, [], [], null, null, false))
    let FLOAT = new Type(new BasicType("Float", false, [], [], null, null, false))
    let INT = new Type(new BasicType("Int", false, [], [], null, null, false))
    let NULL_TYPE = new Type(new BasicType("null", false, [], [], null, null, false))
    let STR = new Type(new BasicType("Str", true, [], [], null, null, false))

    let LIST = new Generic("List")

    # These variables are not exposed in oomph
    let hidden_vars = [
        new BuiltinVariable("bool_eq", new FunctionType([BOOL, BOOL], BOOL)),
        new BuiltinVariable("bool_not", new FunctionType([BOOL], BOOL)),
        new BuiltinVariable("float_add", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_div", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_eq", new FunctionType([FLOAT, FLOAT], BOOL)),
        new BuiltinVariable("float_gt", new FunctionType([FLOAT, FLOAT], BOOL)),
        new BuiltinVariable("float_mod", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_mul", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("float_neg", new FunctionType([FLOAT], FLOAT)),
        new BuiltinVariable("float_sub", new FunctionType([FLOAT, FLOAT], FLOAT)),
        new BuiltinVariable("int2float", new FunctionType([INT], FLOAT)),
        new BuiltinVariable("int_add", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_eq", new FunctionType([INT, INT], BOOL)),
        new BuiltinVariable("int_gt", new FunctionType([INT, INT], BOOL)),
        new BuiltinVariable("int_mod", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_mul", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("int_neg", new FunctionType([INT], INT)),
        new BuiltinVariable("int_sub", new FunctionType([INT, INT], INT)),
        new BuiltinVariable("string_concat", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("string_eq", new FunctionType([STR, STR], BOOL)),
    ]

    let visible_vars = []
    let result = new Builtins(
        BOOL, FLOAT, INT, NULL_TYPE, STR, LIST,
        visible_vars, hidden_vars,
        [],
    )
    result.cleanup_list.push_all(result.builtin_types)

    visible_vars.push_all([
        new BuiltinVariable("__argv_count", new FunctionType([], INT)),
        new BuiltinVariable("__argv_get", new FunctionType([INT], STR)),
        new BuiltinVariable("__get_first_char", new FunctionType([STR], STR)),
        new BuiltinVariable("__get_utf8_byte", new FunctionType([STR, INT], INT)),
        new BuiltinVariable("__hash", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__io_mkdir", new FunctionType([STR], null)),
        new BuiltinVariable("__io_read_file", new FunctionType([STR], STR)),
        new BuiltinVariable("__io_write_file", new FunctionType([STR, STR], null)),
        new BuiltinVariable("__remove_prefix", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__remove_suffix", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("__run_subprocess", new FunctionType([result.generic2type(LIST, STR)], INT)),
        new BuiltinVariable("__slice_until_substring", new FunctionType([STR, STR], STR)),
        new BuiltinVariable("assert", new FunctionType([BOOL, STR, INT], null)),
        new BuiltinVariable("false", BOOL),
        new BuiltinVariable("null", NULL_TYPE),
        new BuiltinVariable("print", new FunctionType([STR], null)),
        new BuiltinVariable("true", BOOL),
    ])

    (FLOAT as BasicType).methods.push_all([
        new Method("ceil", new FunctionType([FLOAT], INT)),
        new Method("equals", new FunctionType([FLOAT, FLOAT], BOOL)),
        new Method("floor", new FunctionType([FLOAT], INT)),
        new Method("round", new FunctionType([FLOAT], INT)),
        new Method("to_string", new FunctionType([FLOAT], STR)),
        new Method("truncate", new FunctionType([FLOAT], INT)),
    ])

    (STR as BasicType).methods.push_all([
        new Method("__contains", new FunctionType([STR, STR], BOOL)),
        new Method("center_pad", new FunctionType([STR, INT, STR], STR)),
        new Method("count", new FunctionType([STR, STR], INT)),
        new Method("ends_with", new FunctionType([STR, STR], BOOL)),
        new Method("equals", new FunctionType([STR, STR], BOOL)),
        new Method("get_utf8", new FunctionType([STR], result.generic2type(LIST, INT))),
        new Method("left_pad", new FunctionType([STR, INT, STR], STR)),
        new Method("left_trim", new FunctionType([STR], STR)),
        new Method("length", new FunctionType([STR], INT)),
        new Method("remove_prefix", new FunctionType([STR, STR], STR)),
        new Method("remove_suffix", new FunctionType([STR, STR], STR)),
        new Method("repeat", new FunctionType([STR, INT], STR)),
        new Method("replace", new FunctionType([STR, STR, STR], STR)),
        new Method("right_pad", new FunctionType([STR, INT, STR], STR)),
        new Method("right_trim", new FunctionType([STR], STR)),
        new Method("split", new FunctionType([STR, STR], result.generic2type(LIST, STR))),
        new Method("starts_with", new FunctionType([STR, STR], BOOL)),
        new Method("to_float", new FunctionType([STR], FLOAT)),
        new Method("to_int", new FunctionType([STR], INT)),
        new Method("to_string", new FunctionType([STR], STR)),  # does nothing
        new Method("trim", new FunctionType([STR], STR)),
    ])

    (BOOL as BasicType).methods.push_all([
        new Method("equals", new FunctionType([BOOL, BOOL], BOOL)),
        new Method("to_string", new FunctionType([BOOL], STR)),
    ])

    (INT as BasicType).methods.push_all([
        new Method("equals", new FunctionType([INT, INT], BOOL)),
        new Method("to_string", new FunctionType([INT], STR)),
    ])

    (NULL_TYPE as BasicType).methods.push_all([
        new Method("equals", new FunctionType([NULL_TYPE, NULL_TYPE], BOOL)),
        new Method("to_string", new FunctionType([NULL_TYPE], STR)),
    ])

    return result

export func get_methods(Type type, Builtins builtins) -> List[Method]:
    switch type:
        case AutoType a:
            assert(false)
        case BasicType basictype:
            return basictype.methods
        case FunctionType functype:
            return []
        case UnionType union:
            let methods = [
                new Method("equals", new FunctionType([type, type], builtins.BOOL)),
                new Method("to_string", new FunctionType([type], builtins.STR)),
            ]
            if (
                union.type_members.length() == 2
                and union.type_members.first() == builtins.NULL_TYPE
            ):
                let item_type = union.type_members.last()
                methods.push(new Method("get", new FunctionType([new Type(union)], item_type)))
            return methods

export func get_method(Type type, Str name, Builtins builtins) -> FunctionType:
    foreach method of get_methods(type, builtins):
        if method.name == name:
            return method.functype

    print("type {type_name(type)} has no method named {name}")
    assert(false)   # TODO: error

export func get_member(Type type, Str name) -> Type:
    switch type:
        case AutoType a:
            assert(false)
        case BasicType basictype:
            let members = basictype.members
        case *:
            members = []

    foreach member of members:
        if member.name == name:
            return member.type

    print("type {type_name(type)} has no member named {name}")
    assert(false)   # TODO: error


export typedef Instruction = (
    ConstructorCall
    | DecRef
    | FloatConstant
    | FunctionCall
    | GetAttribute
    | GetFromUnion
    | GotoIf
    | GotoLabel
    | IncRef
    | InstantiateUnion
    | IntConstant
    | MethodCall
    | PointersEqual
    | Return
    | SetAttribute
    | StringConstant
    | UnSet
    | UnionMemberCheck
    | VarCpy
)
export class ConstructorCall(LocalVariable result, List[LocalVariable] args)
export class DecRef(LocalVariable var)
export class FloatConstant(Str value, LocalVariable var)
export class FunctionCall(Variable function, List[LocalVariable] args, LocalVariable | null result)
export class GetAttribute(LocalVariable obj, LocalVariable result, Str attribute)
export class GetFromUnion(LocalVariable result, LocalVariable union_var)
export class GotoLabel(Int id)
export class GotoIf(GotoLabel label, LocalVariable cond)
export class IncRef(LocalVariable var)
export class InstantiateUnion(LocalVariable result, LocalVariable value)
export class IntConstant(Int value, LocalVariable var)
export class MethodCall(LocalVariable obj, Str method_name, List[LocalVariable] args, LocalVariable | null result, error::Location location)
export class PointersEqual(LocalVariable lhs, LocalVariable rhs, LocalVariable result)
export class Return(LocalVariable | null value)
export class SetAttribute(LocalVariable obj, Str attribute, LocalVariable value)
export class StringConstant(Str value, LocalVariable var)
export class UnSet(LocalVariable var)
export class UnionMemberCheck(LocalVariable result, LocalVariable union_var, Type member_type)
export class VarCpy(LocalVariable dest, Variable source)  # same argument order as memcpy

export typedef ToplevelDeclaration = FuncDef | MethodDef
export class FuncDef(FileVariable var, List[LocalVariable] argvars, List[Instruction] body)
export class MethodDef(Str name, FunctionType type, List[LocalVariable] argvars, List[Instruction] body)

# Symbol represents anything that might need to be shared between different .c files
export typedef SymbolValue = FileVariable | Type
export class Symbol(Str path, Str name, SymbolValue value)
