import "<stdlib>/io.oomph" as io

# Line in file, with location pointing at BLAH:
#
#   blah blah blah BLAH blah blah
#   |_____________||__|
#     line_prefix  code
#
# lineno starts at 1, and for multiline locations, points to start of location
export class Location(Str path, Int lineno, Str line_prefix, Str code):

    # TODO: error() is split up for tests only, get rid of this when possible
    meth print_error(Str message):
        # TODO: print in color
        # TODO: print to stderr, not stdout
        print("{self.path}:{self.lineno}: error: {message}")

        let line = io::read_file(self.path).split("\n").get(self.lineno - 1)
        let line_prefix = self.line_prefix

        # like .left_trim(), but remove same amount from both
        while line.starts_with(" ") and line_prefix.starts_with(" "):
            line = line.remove_prefix(" ")
            line_prefix = line_prefix.remove_prefix(" ")

        # Add extra carets if it's supposed to span multiple lines (or it's "\n")
        if self.code.contains("\n"):
            let caret_count = self.code.split("\n").first().length() + 4
        else:
            caret_count = self.code.length()

        print("")
        print("    " + line)
        print("    " + " ".repeat(line_prefix.length()) + "^".repeat(caret_count))
        print("")

    meth error(Str message):
        self.print_error(message)
        assert(false)  # TODO: better way to exit process

    meth remove_prefix(Str prefix) -> Location:
        assert(self.code.starts_with(prefix))
        return new Location(
            self.path,
            self.lineno + prefix.count("\n"),
            self.line_prefix + prefix,
            self.code.remove_prefix(prefix),
        )

    meth remove_suffix(Str suffix) -> Location:
        assert(self.code.ends_with(suffix))
        return new Location(
            self.path, self.lineno, self.line_prefix, self.code.remove_suffix(suffix)
        )

    meth combine(Location other) -> Location:
        assert(self.path == other.path)

        # Don't bother combining across several lines
        if self.lineno < other.lineno:
            return self
        if self.lineno > other.lineno:
            return other

        if self.line_prefix == other.line_prefix:
            let prefix = self.line_prefix
            # Choose longer code
            if self.code.starts_with(other.code):
                let code = self.code
            elif other.code.starts_with(self.code):
                code = other.code
            else:
                assert(false)
        elif self.line_prefix.starts_with(other.line_prefix):
            prefix = other.line_prefix
            code = self.line_prefix.remove_prefix(other.line_prefix) + self.code
        elif other.line_prefix.starts_with(self.line_prefix):
            prefix = self.line_prefix
            code = other.line_prefix.remove_prefix(self.line_prefix) + other.code
        else:
            assert(false)

        return new Location(self.path, self.lineno, prefix, code)
