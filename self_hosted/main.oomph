import "<stdlib>/io.oomph" as io
import "<stdlib>/subprocess.oomph" as process
import "ast2ir.oomph" as ast2ir
import "c_output.oomph" as c_output
import "ir.oomph" as ir
import "parser.oomph" as parser
import "tokenizer.oomph" as tokenizer

# TODO: respect quoting rules
func split(Str s) -> List[Str]:
    let result = []
    foreach part of s.split(" "):
        if part != "":
            result.push(part)
    return result

func get_c_compiler_command(Str project_root, Str c_path, Str exepath) -> List[Str]:
    # TODO: dict
    let cc = ""
    let cflags = ""
    let ldflags = ""

    foreach line of io::read_file("obj/compile_info.txt").split("\n"):
        if line == "":
            continue
        if line.starts_with("cc="):
            # TODO: remove_prefix or similar method
            cc = line.slice("cc=".length(), line.length())
        elif line.starts_with("cflags="):
            cflags = line.slice("cflags=".length(), line.length())
        elif line.starts_with("ldflags="):
            ldflags = line.slice("ldflags=".length(), line.length())
        else:
            assert(false)   # TODO: error

    let result = [cc]
    result.push_all(split(cflags))
    # FIXME: hard-coded list
    result.push_all([
        "obj/io.o",
        "obj/misc.o",
        "obj/numbers.o",
        "obj/ref.o",
        "obj/string.o",
        "obj/subprocess.o",
    ])
    result.push(c_path)
    result.push("-o")
    result.push(exepath)
    result.push_all(split(ldflags))
    result.push("-I")
    result.push(project_root)
    return result

export func main():
    let project_root = "."
    let cache_dir = "{project_root}/.oomph-cache"
    io::mkdir(cache_dir)

    let args = process::get_args()

    let tokens_only = false
    let ast_only = false
    let valgrind = ""

    while args != [] and args.first().starts_with("--"):
        if args.first() == "--tokens":
            tokens_only = true
        elif args.first() == "--ast":
            ast_only = true
        elif args.first().starts_with("--valgrind="):
            valgrind = args.first().slice("--valgrind=".length(), args.first().length())
        else:
            print("bad arg: {args.first()}")
            assert(false)  # TODO: error

        args.delete_by_index(0)

    assert(not (ast_only and tokens_only))
    assert(args != [])  # TODO: error
    let source_path = args.first()
    args.delete_by_index(0)

    let builtins = ir::create_builtins()
    let code = io::read_file(source_path)

    if tokens_only:
        foreach token of tokenizer::tokenize(code):
            print(token)
        return

    let ast = parser::parse_file(code, source_path, "{project_root}/stdlib.oomph")
    if ast_only:
        print(ast)
        return

    let ir = ast2ir::convert_program(builtins, ast)
    let c_code = c_output::create_code(builtins, ir)
    io::write_file("{cache_dir}/out.c", c_code)
    assert(process::run(
        get_c_compiler_command(project_root, "{cache_dir}/out.c", "{cache_dir}/out")
    ) == 0)

    let run_command = split(valgrind)
    run_command.push("{cache_dir}/out")
    run_command.push_all(args)
    assert(process::run(run_command) == 0)
