import "<stdlib>/io.oomph" as io
import "<stdlib>/process.oomph" as process
import "ast2ir.oomph" as ast2ir
import "ast_transformer.oomph" as ast_transformer
import "c_output.oomph" as c_output
import "ir.oomph" as ir
import "parser.oomph" as parser
import "tokenizer.oomph" as tokenizer

# TODO: respect quoting rules
func split(Str s) -> List[Str]:
    let result = s.split(" ")
    while "" in result:
        result.delete_first("")
    return result

func get_c_compiler_command(List[Str] c_paths, Str exepath) -> List[Str]:
    # TODO: dict
    let cc = ""
    let cflags = ""
    let ldflags = ""

    foreach line of io::read_file("obj/compile_info.txt").split("\n"):
        if line == "":
            continue
        if line.starts_with("cc="):
            cc = line.remove_prefix("cc=")
        elif line.starts_with("cflags="):
            cflags = line.remove_prefix("cflags=")
        elif line.starts_with("ldflags="):
            ldflags = line.remove_prefix("ldflags=")
        else:
            assert(false)   # TODO: error

    let result = [cc]
    result.push_all(split(cflags))
    # FIXME: hard-coded list
    result.push_all([
        "obj/io.o",
        "obj/misc.o",
        "obj/numbers.o",
        "obj/ref.o",
        "obj/string.o",
        "obj/process.o",
    ])
    result.push_all(c_paths)
    result.push("-o")
    result.push(exepath)
    result.push_all(split(ldflags))
    result.push("-I")
    result.push(".")
    return result

func create_ir(ir::Builtins builtins, Str source_path) -> List[ir::ToplevelDeclaration]:
    let code = io::read_file(source_path)
    let ast = ast_transformer::transform(parser::parse_file(code, source_path, "stdlib.oomph"))
    return ast2ir::convert_program(builtins, ast, source_path, [])

export func main():
    let cache_dir = ".oomph-cache"
    io::mkdir(cache_dir)

    let args = process::get_args()

    let tokens_only = false
    let ast_only = false
    let valgrind = ""

    while args != [] and args.first().starts_with("--"):
        let arg = args.delete_at_index(0)
        if arg == "--tokens":
            tokens_only = true
        elif arg == "--ast":
            ast_only = true
        elif arg.starts_with("--valgrind="):
            valgrind = arg.remove_prefix("--valgrind=")
        else:
            print("bad arg: {arg}")
            assert(false)  # TODO: error

    assert(not (ast_only and tokens_only))
    assert(args != [])  # TODO: error
    let source_path = args.delete_at_index(0)

    if tokens_only:
        let code = io::read_file(source_path)
        foreach token of tokenizer::tokenize(code, source_path, 1, ""):
            print(token)
        return

    if ast_only:
        let code = io::read_file(source_path)
        let ast = ast_transformer::transform(parser::parse_file(code, source_path, "stdlib"))
        print(ast)
        return

    let builtins = ir::create_builtins()
    let builtins_ir = create_ir(builtins, "builtins.oomph")
    let file_ir = create_ir(builtins, source_path)

    # TODO: use separate compilation dir inside cache dir
    let session = new c_output::Session(builtins, cache_dir, [], [])
    session.create_c_code(builtins_ir, "builtins.oomph")
    session.create_c_code(file_ir, source_path)
    let c_paths = session.write_everything("builtins.oomph")

    assert(process::run(
        get_c_compiler_command(c_paths, "{cache_dir}/out")
    ) == 0)

    let run_command = split(valgrind)
    run_command.push("{cache_dir}/out")
    run_command.push_all(args)
    assert(process::run(run_command) == 0)

    session.destroy()
    builtins.destroy()
