import "ir.oomph" as ir

class File(ir::Builtins builtins, List[Str] declared_strings, Str string_defs):
    meth get_type_c_name(ir::Type type) -> Str:
        return (type as ir::BasicType).name

    meth emit_type(ir::Type type) -> Str:
        if type == self.builtins.INT:
            return "int64_t"
        if type == self.builtins.BOOL:
            return "bool"
        if type == self.builtins.FLOAT:
            return "double"
        switch type:
            case ir::BasicType basic:
                if basic.refcounted:
                    return "struct class_{self.get_type_c_name(type)} *"
            case *:
                pass
        return "struct class_{self.get_type_c_name(type)}"

    meth emit_declaration(ir::Type type, Str varname) -> Str:
        if type == self.builtins.INT or type == self.builtins.FLOAT:
            return "{self.emit_type(type)} {varname};"
        return "{self.emit_type(type)} {varname} = NULL;"

    meth emit_string(Str value) -> Str:
        # TODO: replace with one of: list find method, enumerate, mapping
        for let i = 0; i < self.declared_strings.length(); i = i+1:
            if self.declared_strings.get(i) == value:
                return "string{i}"

        let varname = "string{self.declared_strings.length()}"
        self.declared_strings.push(value)

        let content_chars = [foreach c of value.get_utf8(): c.to_string()]
        content_chars.push("'\\0'")

        self.string_defs = self.string_defs + """
        static {self.emit_type(self.builtins.STR)} {varname}
        = (void*)(unsigned char[]) \{
            // TODO: is this insanity cross-platform enough?
            0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff,
            {content_chars.join(",")}
        \};
        """
        return varname

class FunctionEmitter(
    File file,
    List[ir::LocalVariable] declared_vars,
    Str before_body,
    Str body,
    Str after_body,
):

    meth emit_var(ir::Variable var) -> Str:
        switch var:
            case ir::LocalVariable local_var:
                if local_var in self.declared_vars:
                    return "var{local_var.id}"

                self.before_body = self.before_body + self.file.emit_declaration(
                    local_var.type, "var{local_var.id}")
                self.declared_vars.push(local_var)
                return "var{local_var.id}"
            case ir::BuiltinVariable builtin_var:
                return builtin_var.name
            case ir::FileVariable this_file_var:
                assert(false)

    meth emit_call(Str c_func, List[ir::LocalVariable] args, Optional[ir::LocalVariable] result):
        let arg_strings = [foreach arg of args: self.emit_var(arg)]
        if result == null:
            let assignment = ""
        else:
            assignment = "{self.emit_var(result.get())} ="

        self.body = self.body + """
        {assignment} {c_func}({arg_strings.join(",")});
        """

    # FIXME
    meth is_refcounted(ir::Type type) -> Bool:
        if type == self.file.builtins.STR:
            return true
        if (
            type == self.file.builtins.INT
            or type == self.file.builtins.BOOL
            or type == self.file.builtins.FLOAT
        ):
            return false
        print("is_refcounted dunno about {type}")
        assert(false)

    meth emit_instruction(ir::Instruction ins):
        switch ins:
            case ir::FloatConstant floatconst:
                self.body = self.body + """
                {self.emit_var(floatconst.var)} = {floatconst.value};
                """

            case ir::FunctionCall call:
                # TODO: use emit_var
                if call.function == self.file.builtins.get_visible_var("print"):
                    self.emit_call("io_print", call.args, null)
                else:
                    self.emit_call(
                        (call.function as ir::BuiltinVariable).name,
                        call.args,
                        call.result
                    )

            case ir::IntConstant intconst:
                self.body = self.body + """
                {self.emit_var(intconst.var)} = {intconst.value}LL;
                """

            case ir::MethodCall call:
                let args = [call.obj]
                args.push_all(call.args)
                self.emit_call(
                    "meth_{self.file.get_type_c_name(call.obj.type)}_{call.method_name}",
                    args, call.result)

            case ir::StringConstant strconst:
                self.body = self.body + """
                {self.emit_var(strconst.var)} = {self.file.emit_string(strconst.value)};
                """

            case ir::VarCpy varcpy:
                self.body = self.body + """
                {self.emit_var(varcpy.dest)} = {self.emit_var(varcpy.source)};
                """

            case ir::GotoLabel label:
                # (void)0 needed when label is last thing in function
                self.body = self.body + """
                label{label.id}:
                    (void)0;
                """

            case ir::GotoIf goto:
                self.body = self.body + """
                if ({self.emit_var(goto.cond)})
                    goto label{goto.label.id};
                """

            case ir::IncRef incref:
                if self.is_refcounted(incref.var.type):
                    assert(incref.var.type == self.file.builtins.INT)
                    self.body = self.body + """
                    incref({self.emit_var(incref.var)});
                    """

            case ir::DecRef decref:
                if self.is_refcounted(decref.var.type):
                    assert(decref.var.type == self.file.builtins.STR)
                    self.body = self.body + """
                    decref({self.emit_var(decref.var)}, dtor_Str);
                    """

            case ir::UnSet unset:
                if self.is_refcounted(unset.var.type):
                    assert(unset.var.type == self.file.builtins.STR)
                    self.body = self.body + """
                    {self.emit_var(unset.var)} = NULL;
                    """

            case *:
                print(ins)
                assert(false)

export func create_code(ir::Builtins builtins, List[ir::ToplevelDeclaration] ir) -> Str:
    let file = new File(builtins, [], "")

    let code = ""
    foreach top_decl of ir:
        let funcdef = top_decl as ir::FuncDef
        assert(funcdef.var.name == "main")
        assert(funcdef.argvars == [])

        let emitter = new FunctionEmitter(file, [], "", "", "")
        foreach ins of funcdef.body:
            emitter.emit_instruction(ins)
        code = code + """
        void oomph_main(void)
        \{
            {emitter.before_body}
            {emitter.body}
            {emitter.after_body}
        \}
        """

    return "#define SELF_HOSTED\n#include <lib/oomph.h>\n" + file.string_defs + code
