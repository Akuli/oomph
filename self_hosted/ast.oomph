import "error.oomph" as error

export typedef Type = AutoType | GenericType | NamedType | UnionType
export class AutoType(error::Location location)
export class GenericType(error::Location location, Str name, Type arg)
export class NamedType(error::Location location, Str name)
export class UnionType(List[Type] unioned)  # always 2 or more unioned types

export func locate_type(Type type) -> error::Location:
    switch type:
        case AutoType autotype:
            return autotype.location
        case GenericType generic_type:
            return generic_type.location
        case NamedType named_type:
            return named_type.location
        case UnionType union_type:
            let result = locate_type(union_type.unioned.first())
            foreach member of union_type.unioned.slice(1, union_type.unioned.length()):
                result = result.combine(locate_type(member))
            return result

export typedef Expression = (
    As
    | BinaryOperator
    | Call
    | Constructor
    | FloatConstant
    | GetAttribute
    | GetVar
    | IntConstant
    | ListComprehension
    | ListLiteral
    | Parenthesized     # makes error handling easier in parser.oomph
    | StatementsAndExpression
    | StringConstant
    | StringFormatJoin
    | UnaryOperator
)
export typedef Statement = (
    Break
    | Call
    | Continue
    | If
    | Let
    | Loop
    | Pass
    | Return
    | SetAttribute
    | SetVar
    | Switch
)
# In ToplevelDeclaration, FuncOrMethodDef is always function definition
export typedef ToplevelDeclaration = ClassDef | FuncOrMethodDef | Import | TypeDef

export class TypeAndName(Type type, Str name, error::Location name_location)

# 'case *' means that type_and_varname is null
export class Case(error::Location location, TypeAndName | null type_and_name, List[Statement] body)
export class ConditionAndBody(error::Location location, Expression cond, List[Statement] body)

export typedef LoopHeader = ForLoopHeader | ForeachLoopHeader
# for init; cond; incr
export class ForLoopHeader(error::Location keyword_location, List[Statement] init, Expression | null cond, List[Statement] incr)
export class ForeachLoopHeader(error::Location keyword_location, Str varname, Expression list)

export class As(error::Location location, Expression expr, Type type, Bool as_not)
export class BinaryOperator(error::Location location, Expression lhs, Str op, Expression rhs)
export class Call(error::Location location, Expression function, List[Expression] args)
export class Constructor(error::Location location, Type type)
export class FloatConstant(error::Location location, Str value)  # value not converted to float in case weirdness :D
export class GetAttribute(error::Location attribute_location, Expression obj, Str attribute)
export class GetVar(error::Location location, Str varname)
export class IntConstant(error::Location location, Int value)
export class ListComprehension(LoopHeader loop_header, Expression value)
export class ListLiteral(error::Location location, List[Expression] content)
export class Parenthesized(Expression content)
export class StatementsAndExpression(error::Location location, List[Statement] statements, Expression expression)
export class StringConstant(error::Location location, Str value)
export class StringFormatJoin(error::Location location, List[Expression] parts)  # always >=2 parts
export class UnaryOperator(error::Location location, Str op, Expression obj)

export class Break(error::Location location)
export class Continue(error::Location location)
export class If(List[ConditionAndBody] ifs_and_elifs, List[Statement] else_block)
export class Let(error::Location location, Str varname, Expression value)
export class Loop(LoopHeader loop_header, List[Statement] body)
export class Pass(error::Location location)
export class Return(error::Location location, Expression | null value)
export class SetAttribute(error::Location attribute_location, Expression obj, Str attribute, Expression value)
export class SetVar(error::Location location, Str varname, Expression value)
export class Switch(error::Location location, Expression union_obj, List[Case] cases)

export class NoReturn(error::Location location)

export class FuncOrMethodDef(error::Location location, Str name, List[TypeAndName] args, Type | NoReturn | null returntype, List[Statement] body)
export class ClassDef(error::Location location, Str name, List[TypeAndName] members, List[FuncOrMethodDef] body)
export class Import(error::Location location, Str path, Str name)
export class TypeDef(error::Location location, Str name, Type type)

export func locate_loop_header(LoopHeader loop_header) -> error::Location:
    switch loop_header:
        case ForLoopHeader header:
            return header.keyword_location
        case ForeachLoopHeader header:
            return header.keyword_location

export func locate_expression(Expression expression) -> error::Location:
    switch expression:
        case As expr:
            return locate_expression(expr.expr).combine(locate_type(expr.type))
        case BinaryOperator expr:
            return locate_expression(expr.lhs).combine(locate_expression(expr.rhs))
        case Call expr:
            return locate_expression(expr.function).combine(expr.location)
        case Constructor expr:
            return expr.location
        case FloatConstant expr:
            return expr.location
        case GetAttribute expr:
            return locate_expression(expr.obj).combine(expr.attribute_location)
        case GetVar expr:
            return expr.location
        case IntConstant expr:
            return expr.location
        case ListComprehension expr:
            # TODO: should be the whole list comp?
            return locate_loop_header(expr.loop_header)
        case ListLiteral expr:
            return expr.location
        case Parenthesized parened:
            return locate_expression(parened.content)
        case StatementsAndExpression expr:
            return expr.location
        case StringConstant expr:
            return expr.location
        case StringFormatJoin expr:
            return expr.location
        case UnaryOperator expr:
            return expr.location
