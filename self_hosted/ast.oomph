import "location.oomph" as location
typedef Location = location::Location

export typedef Type = AutoType | FunctionType | GenericType | NamedType | UnionType
export class AutoType(Location location)
export class FunctionType(Location location, List[Type] argtypes, Type | NoReturn | null returntype)
export class GenericType(Location location, Str name, List[Type] args)
export class NamedType(Location location, Str name)
export class UnionType(List[Type] unioned)  # always 2 or more unioned types

export func locate_type(Type type) -> Location:
    switch type:
        case AutoType autotype:
            return autotype.location
        case FunctionType functype:
            return functype.location
        case GenericType generic_type:
            return generic_type.location
        case NamedType named_type:
            return named_type.location
        case UnionType union_type:
            let result = locate_type(union_type.unioned.first())
            foreach member of union_type.unioned.slice(1, union_type.unioned.length()):
                result = result.combine(locate_type(member))
            return result

export typedef Expression = (
    As
    | BinaryOperator
    | Call
    | Constructor
    | FloatConstant
    | GetAttribute
    | Variable
    | IntConstant
    | ListComprehension
    | ListLiteral
    | Parenthesized     # makes error handling easier in parser.oomph
    | StatementsAndExpression
    | StringConstant
    | StringFormatJoin
    | UnaryOperator
)
export typedef Statement = (
    Break
    | Call
    | Continue
    | If
    | Let
    | Loop
    | Pass
    | Return
    | SetAttribute
    | SetVar
    | Switch
)
# In ToplevelDeclaration, FuncOrMethodDef is always function definition
export typedef ToplevelDeclaration = ClassDef | FuncOrMethodDef | Import | TypeDef

# Always use Variable when referring to variable. Several Variable objects may refer
# to the same variable because the parser isn't responsible for figuring it out.
export class Variable(Location location, Str name)

# TODO: tuple
export class TypeAndVar(Type type, Variable var)
export class TypeAndName(Type type, Str name)

# 'case *' means that type_and_varname is null
export class Case(Location location, TypeAndVar | null type_and_var, List[Statement] body)
export class ConditionAndBody(Location location, Expression cond, List[Statement] body)

export typedef LoopHeader = ForLoopHeader | ForeachLoopHeader
# for init; cond; incr
export class ForLoopHeader(Location keyword_location, List[Statement] init, Expression | null cond, List[Statement] incr)
export class ForeachLoopHeader(Location keyword_location, Variable var, Expression list)

export class As(Location location, Expression expr, Type type, Bool as_not)
export class BinaryOperator(Location location, Expression lhs, Str op, Expression rhs)
export class Call(Location location, Expression function, List[Expression] args)
export class Constructor(Location location, Type type)
export class FloatConstant(Location location, Str value)  # value not converted to float in case weirdness :D
export class GetAttribute(Location attribute_location, Expression obj, Str attribute)
export class IntConstant(Location location, Int value)
export class ListComprehension(LoopHeader loop_header, Expression value)
export class ListLiteral(Location location, List[Expression] content)
export class Parenthesized(Expression content)
export class StatementsAndExpression(Location location, List[Statement] statements, Expression expression)
export class StringConstant(Location location, Str value)
export class StringFormatJoin(Location location, List[Expression] parts)  # always >=2 parts
export class UnaryOperator(Location location, Str op, Expression obj)

export class Break(Location location)
export class Continue(Location location)
export class If(List[ConditionAndBody] ifs_and_elifs, List[Statement] else_block)
export class Let(Location location, Variable var, Expression value)
export class Loop(LoopHeader loop_header, List[Statement] body)
export class Pass(Location location)
export class Return(Location location, Expression | null value)
export class SetAttribute(Location attribute_location, Expression obj, Str attribute, Expression value)
export class SetVar(Location location, Variable var, Expression value)
export class Switch(Location location, Expression union_obj, List[Case] cases)

export class NoReturn(Location location)

# TODO: use FunctionType here?
export class FuncOrMethodDef(Location location, Str name, List[TypeAndVar] args, Type | NoReturn | null returntype, List[Statement] body)
export class ClassDef(Location location, Str name, List[TypeAndName] members, List[FuncOrMethodDef] body)
export class Import(Location location, Str path, Str name)
export class TypeDef(Location location, Str name, Type type)

export func locate_loop_header(LoopHeader loop_header) -> Location:
    switch loop_header:
        case ForLoopHeader header:
            return header.keyword_location
        case ForeachLoopHeader header:
            return header.keyword_location

export func locate_expression(Expression expression) -> Location:
    switch expression:
        case As expr:
            return locate_expression(expr.expr).combine(locate_type(expr.type))
        case BinaryOperator expr:
            return locate_expression(expr.lhs).combine(locate_expression(expr.rhs))
        case Call expr:
            return locate_expression(expr.function).combine(expr.location)
        case Constructor expr:
            return expr.location
        case FloatConstant expr:
            return expr.location
        case GetAttribute expr:
            return locate_expression(expr.obj).combine(expr.attribute_location)
        case Variable expr:
            return expr.location
        case IntConstant expr:
            return expr.location
        case ListComprehension expr:
            # TODO: should be the whole list comp?
            return locate_loop_header(expr.loop_header)
        case ListLiteral expr:
            return expr.location
        case Parenthesized parened:
            return locate_expression(parened.content)
        case StatementsAndExpression expr:
            return expr.location
        case StringConstant expr:
            return expr.location
        case StringFormatJoin expr:
            return expr.location
        case UnaryOperator expr:
            return expr.location
