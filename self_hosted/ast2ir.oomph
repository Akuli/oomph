import "ast.oomph" as ast
import "ir.oomph" as ir

class Converter(ir::Builtins builtins, List[ir::Instruction] code, Int id_counter):
    meth create_var(ir::Type type) -> ir::LocalVariable:
        self.id_counter = self.id_counter + 1
        return new ir::LocalVariable(type, self.id_counter)

    meth create_goto_label() -> ir::GotoLabel:
        self.id_counter = self.id_counter + 1
        return new ir::GotoLabel(self.id_counter)

    meth builtin_call(ir::BuiltinVariable function, List[ir::LocalVariable] args) -> ir::LocalVariable:
        switch function.type:
            case ir::FunctionType functype:
                let result_var = self.create_var(functype.returntype.get())
                self.code.push(new ir::FunctionCall(function, args, result_var))
                return result_var
            case *:
                assert(false)

    meth int_to_float(ir::LocalVariable int_var) -> ir::LocalVariable:
        let float_var = self.create_var(self.builtins.FLOAT)
        self.code.push(new ir::IntToFloat(int_var, float_var))
        return float_var

    meth do_expression(ast::Expression expr) -> ir::LocalVariable:
        switch expr:
            case ast::BinaryOperator bin_op:
                if bin_op.op == "and":
                    let skip_early_false = self.create_goto_label()
                    let done = self.create_goto_label()

                    let result_var = self.create_var(self.builtins.BOOL)
                    let local_true = self.create_var(self.builtins.BOOL)
                    let local_false = self.create_var(self.builtins.BOOL)
                    self.code.push(new ir::VarCpy(local_true, self.builtins.get_visible_var("true")))
                    self.code.push(new ir::VarCpy(local_false, self.builtins.get_visible_var("false")))

                    let lhs_var = self.do_expression(bin_op.lhs)
                    assert(lhs_var.type == self.builtins.BOOL)  # TODO: error
                    self.code.push(new ir::GotoIf(skip_early_false, lhs_var))

                    self.code.push(new ir::VarCpy(result_var, local_false))
                    self.code.push(new ir::GotoIf(done, local_true))

                    self.code.push(skip_early_false)
                    let rhs_var = self.do_expression(bin_op.rhs)
                    assert(rhs_var.type == self.builtins.BOOL)  # TODO: error
                    self.code.push(new ir::VarCpy(result_var, rhs_var))

                    self.code.push(done)
                    return result_var

                if bin_op.op == "or":
                    let skip_rhs = self.create_goto_label()
                    let done = self.create_goto_label()

                    let result_var = self.create_var(self.builtins.BOOL)
                    let local_true = self.create_var(self.builtins.BOOL)
                    self.code.push(new ir::VarCpy(local_true, self.builtins.get_visible_var("true")))

                    let lhs_var = self.do_expression(bin_op.lhs)
                    assert(lhs_var.type == self.builtins.BOOL)  # TODO: error
                    self.code.push(new ir::GotoIf(skip_rhs, lhs_var))

                    let rhs_var = self.do_expression(bin_op.rhs)
                    assert(rhs_var.type == self.builtins.BOOL)  # TODO: error
                    self.code.push(new ir::VarCpy(result_var, rhs_var))
                    self.code.push(new ir::GotoIf(done, local_true))

                    self.code.push(skip_rhs)
                    self.code.push(new ir::VarCpy(result_var, local_true))
                    self.code.push(new ir::GotoIf(done, local_true))

                    self.code.push(done)
                    return result_var

                lhs_var = self.do_expression(bin_op.lhs)
                rhs_var = self.do_expression(bin_op.rhs)

                if lhs_var.type == self.builtins.INT and bin_op.op == "+" and rhs_var.type == self.builtins.INT:
                    return self.builtin_call(self.builtins.get_hidden_var("int_add"), [lhs_var, rhs_var])
                if lhs_var.type == self.builtins.INT and bin_op.op == "-" and rhs_var.type == self.builtins.INT:
                    return self.builtin_call(self.builtins.get_hidden_var("int_sub"), [lhs_var, rhs_var])
                if lhs_var.type == self.builtins.INT and bin_op.op == "*" and rhs_var.type == self.builtins.INT:
                    return self.builtin_call(self.builtins.get_hidden_var("int_mul"), [lhs_var, rhs_var])

                if lhs_var.type == self.builtins.INT:
                    lhs_var = self.int_to_float(lhs_var)
                if rhs_var.type == self.builtins.INT:
                    rhs_var = self.int_to_float(rhs_var)

                if lhs_var.type == self.builtins.FLOAT and bin_op.op == "+" and rhs_var.type == self.builtins.FLOAT:
                    return self.builtin_call(self.builtins.get_hidden_var("float_add"), [lhs_var, rhs_var])
                if lhs_var.type == self.builtins.FLOAT and bin_op.op == "-" and rhs_var.type == self.builtins.FLOAT:
                    return self.builtin_call(self.builtins.get_hidden_var("float_sub"), [lhs_var, rhs_var])
                if lhs_var.type == self.builtins.FLOAT and bin_op.op == "*" and rhs_var.type == self.builtins.FLOAT:
                    return self.builtin_call(self.builtins.get_hidden_var("float_mul"), [lhs_var, rhs_var])
                if lhs_var.type == self.builtins.FLOAT and bin_op.op == "/" and rhs_var.type == self.builtins.FLOAT:
                    return self.builtin_call(self.builtins.get_hidden_var("float_div"), [lhs_var, rhs_var])

                print("bad bin op: {ir::type_name(lhs_var.type)} {bin_op.op} {ir::type_name(rhs_var.type)}")
                assert(false)   # TODO: error

            case ast::UnaryOperator unary_op:
                let var = self.do_expression(unary_op.obj)
                if var.type == self.builtins.INT and unary_op.op == "-":
                    return self.builtin_call(self.builtins.get_hidden_var("int_neg"), [var])
                if var.type == self.builtins.FLOAT and unary_op.op == "-":
                    return self.builtin_call(self.builtins.get_hidden_var("float_neg"), [var])
                if var.type == self.builtins.BOOL and unary_op.op == "not":
                    return self.builtin_call(self.builtins.get_hidden_var("bool_not"), [var])

                print("bad unary op: {unary_op.op} {ir::type_name(var.type)}")
                assert(false)  # TODO: error

            case ast::GetVar getvar:
                # TODO: refcounts
                let old_var = self.builtins.get_visible_var(getvar.varname)
                let new_var = self.create_var(old_var.type)
                self.code.push(new ir::VarCpy(new_var, old_var))
                return new_var

            case ast::FloatConstant floatconst:
                let var = self.create_var(self.builtins.FLOAT)
                self.code.push(new ir::FloatConstant(floatconst.value, var))
                return var

            case ast::IntConstant intconst:
                var = self.create_var(self.builtins.INT)
                self.code.push(new ir::IntConstant(intconst.value, var))
                return var

            case ast::StringConstant strconst:
                var = self.create_var(self.builtins.STR)
                self.code.push(new ir::StringConstant(strconst.value, var))
                return var

            case *:
                print("TODO: {expr}")
                assert(false)

    meth stringify(ir::LocalVariable var) -> ir::LocalVariable:
        let result = self.create_var(self.builtins.STR)
        self.code.push(new ir::MethodCall(var, "to_string", [], result))
        return result

    meth do_statement(ast::Statement statement):
        switch statement:
            case ast::Call call:
                switch call.function:
                    # Currently, functions must be variables
                    case ast::GetVar getvar:
                        let func_var = self.builtins.get_visible_var(getvar.varname)
                    case *:
                        assert(false)  # TODO: error

                let argvars = []
                foreach arg of call.args:
                    let expr = self.do_expression(arg)
                    if func_var == self.builtins.get_visible_var("print") and expr.type != self.builtins.STR:
                        expr = self.stringify(expr)
                    argvars.push(expr)
                self.code.push(new ir::FunctionCall(func_var, argvars, null))
            case *:
                print("unknown statement {statement}")
                assert(false)

    meth do_block(List[ast::Statement] body) -> List[ir::Instruction]:
        # TODO: separate class
        assert(self.code == [])
        foreach stmt of body:
            self.do_statement(stmt)
        return self.code

    meth do_funcdef(ast::FuncOrMethodDef funcdef) -> ir::FuncDef:
        assert(funcdef.args == [])
        let functype = new ir::FunctionType([], null)
        assert(funcdef.name == "main")
        let func_var = new ir::FileVariable(funcdef.name, functype)
        let body = self.do_block(funcdef.body)
        return new ir::FuncDef(func_var, [], body)

export func convert_program(ir::Builtins builtins, List[ast::ToplevelDeclaration] program) -> List[ir::ToplevelDeclaration]:
    let result = new List[ir::ToplevelDeclaration]()  # https://github.com/Akuli/oomph/issues/54
    foreach top_decl of program:
        switch top_decl:
            case ast::FuncOrMethodDef funcdef:
                result.push(new Converter(builtins, [], 0).do_funcdef(funcdef))
            case *:
                print("don't know what to do with {top_decl}")
                assert(false)
    return result
