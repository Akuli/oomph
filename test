#!/bin/bash
set -e
set -o pipefail

if [ "$1" == --keep-going ]; then
    stop_on_fail=no
    shift
else
    stop_on_fail=yes
fi

make

success=0
fail=0

for file in tests/*.code; do
    echo "python3 -m compiler $@ $file"
    if [[ $file == tests/*_error.code ]] && python3 -m compiler "$@" $file 2>&1 | tail -2 > test.out; then
        echo "========== SHOULD HAVE ERRORED but it didn't"
        fail=$((fail+1))
    elif [[ $file != tests/*_error.code ]] && ! python3 -m compiler "$@" $file > test.out; then
        echo "========== ERROR in $file"
        fail=$((fail+1))
    else
        outfile=tests/output/$(basename $file | cut -d. -f1).txt
        if ! [ -f $outfile ]; then
            echo "Creating $outfile automatically"
            cp test.out $outfile
            cat -n $outfile
        fi

        if diff --color -u $outfile test.out; then
            success=$((success+1))
        else
            if [ $outfile -ot $file ]; then
                echo "Updating $outfile with this diff"
                cp test.out $outfile
                success=$((success+1))
            else
                fail=$((fail+1))
            fi
        fi
    fi

    if [ $stop_on_fail = yes ] && [ $fail != 0 ]; then
        break
    fi
done

if [ $fail == 0 ]; then
    failmsg="0 failed"
else
    failmsg="\u001b[31m$fail failed\u001b[0m"
fi
echo -e "
======================== $success succeeded, $failmsg ========================"

if [ $fail != 0 ]; then
    exit 1
fi
