#!/bin/bash
set -e
set -o pipefail

if [ "$1" == --keep-going ]; then
    keep_going=yes
    shift
else
    keep_going=no
fi
oomphopts="$@"

make

function check()
{
    local file=$1
    shift
    local oomph="$@"

    if [[ $file == tests/*_error.oomph ]]; then
        local expect_fail=yes
        local command="$oomph $file"
    else
        local expect_fail=no
        local command="$oomph $oomphopts $file"
        if [ $file == tests/args.oomph ]; then
            command="$command hello world"
        fi
    fi

    local success
    local out=test_out/$(echo $command | sed 's/[^a-z0-9]/-/g').txt

    echo "$command"
    if [ $expect_fail == yes ] && $command 2>&1 | tail -2 > $out; then
        echo "========== SHOULD HAVE ERRORED but it didn't: $command"
        success=no
    elif [ $expect_fail == no ] && ! $command > $out; then
        echo "========== ERROR: $command"
        success=no
    else
        local outfile=tests/output/$(basename $file | cut -d. -f1).txt
        if ! [ -f $outfile ]; then
            echo "Creating $outfile automatically"
            cp $out $outfile
            cat -n $outfile
        fi

        if diff --color -u $outfile $out; then
            success=yes
        elif [ $outfile -ot $file ]; then
            echo "Updating $outfile with this diff"
            cp $out $outfile
            success=yes
        else
            echo "========== diff does not match: $command"
            success=no
        fi
    fi

    if [ $success == yes ]; then
        echo "success: $command" >> test_out/status
    else
        echo "fail: $command" >> test_out/status
    fi
}

function run {
    if [ $(jobs | wc -l) -ge $(nproc) ]; then
        wait -n
    fi
    "$@" &
}

mkdir -vp test_out
rm -rvf test_out/status test_out/io_testing_dir
touch test_out/status

trap wait EXIT
for file in tests/*.oomph; do
    if [[ $file == tests/*_lib.oomph ]]; then
        # The file is meant to be imported
        continue
    fi

    if grep -q fail test_out/status && [ $keep_going == no ]; then
        # Test failed, stop instead of making more failures
        break
    fi

    run check $file python3 -m pyoomph
    if grep -q "^$file" tests/self_hosted.txt; then
        run check $file python3 -m pyoomph $oomphopts oomph/main.oomph
    fi
done
wait

successes=$(grep -c '^success:' test_out/status || true)
fails=$(grep -c '^fail:' test_out/status || true)

if [ $fails == 0 ]; then
    failmsg="0 failed"
else
    failmsg="\u001b[31m$fails failed\u001b[0m"
fi
echo -e "
======================== $successes succeeded, $failmsg ========================"
