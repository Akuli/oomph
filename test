#!/bin/bash
set -e
set -o pipefail

keep_going=no
fix=no
check_self_hosted=no
check_pyoomph=no

while [[ "$1" == --* ]]; do
    case "$1" in
        --keep-going)
            keep_going=yes
            shift
            ;;
        --fix)
            fix=yes
            shift
            ;;
        --valgrind)
            valgrind='valgrind -q --leak-check=full --show-leak-kinds=all'
            compiler_valgrind_arg="--valgrind='$valgrind'"
            shift
            ;;
        --self-hosted)
            check_self_hosted=yes
            shift
            ;;
        --pyoomph)
            check_pyoomph=yes
            shift
            ;;
        *)
            echo "$0: unknown argument: $1" 1>&2
            exit 2
    esac
done

if [ $check_self_hosted == no ] && [ $check_pyoomph == no ]; then
    check_self_hosted=yes
    check_pyoomph=yes
fi

function check()
{
    local file="$1"
    local command="$2"
    local noise="$3"  # added to end of command, not echoed
    local output_dir="$4"
    local expected="$5"

    if [ $file == tests/args.oomph ]; then
        command="$command hello world"
    fi
    if [ "$output_dir" == "" ]; then
        noise="$noise >/dev/null"
        local outfile=/dev/null
    else
        local outfile=$output_dir/$(basename $file | cut -d. -f1).txt
    fi

    if [ $keep_going == no ] && grep -q '^fail:' test_out/status; then
        echo "skip: $command" >> test_out/status
        return
    fi

    local success
    local out=test_out/$(echo $command | sed 's/[^a-z0-9]/-/g').txt

    echo "$command"
    if [ $expected == should_fail ] && eval "$command $noise" > $out; then
        echo "========== SHOULD HAVE ERRORED but it didn't: $command"
        success=no
    elif [ $expected == should_succeed ] && ! eval "$command $noise" > $out; then
        echo "========== ERROR: $command"
        success=no
    else
        if [ $file != tests/assert_error.oomph ]; then
            sed -i 's/, line [0-9][0-9]*/, line N/' $out
        fi
        if [ $fix == yes ]; then
            touch $outfile
        fi

        if diff --color --unified $outfile $out; then
            success=yes
        elif [ $fix == yes ]; then
            echo "Updating $outfile with this diff"
            cp $out $outfile
            success=yes
        else
            echo "========== diff does not match: $command"
            success=no
        fi
    fi

    if [ $success == yes ]; then
        echo "success: $command" >> test_out/status
    else
        echo "fail: $command" >> test_out/status
    fi
}

function run()
{
    if [ $(jobs | wc -l) -ge $(nproc) ]; then
        wait -n
    fi
    "$@" &
}
echo "Running $(nproc) tests at a time in parallel"
trap wait EXIT

make
mkdir -vp test_out
rm -rvf test_out/status test_out/io_testing_dir
touch test_out/status

if [ $check_pyoomph == yes ]; then
    for file in tests/*.oomph; do
        if [[ $file == tests/*_lib.oomph ]]; then
            # The file is meant to be imported
            continue
        elif [[ $file == tests/*_error.oomph ]]; then
            run check \
                "$file" \
                "python3 -m pyoomph $file" \
                "2>&1 | (grep -v 'This happened while' || true) | tail -2" \
                tests/output/pyoomph \
                should_fail
        else
            run check \
                "$file" \
                "python3 -m pyoomph $compiler_valgrind_arg $file" \
                "" \
                tests/output/common \
                should_succeed
        fi
    done
    wait
fi

# Run all self-hosted tests with same compiler (speeds up a LOT)
if [ $check_self_hosted == yes ] && (
    [ $keep_going == yes ] || ! grep -q '^fail:' test_out/status
); then
    # Currently self-hosted doesn't parallelize well, but is fast
    echo "Compiling self-hosted compiler"
    make oomphc

    for file in tests/*.oomph self_hosted/*.oomph; do
        if [[ $file == tests/*_lib.oomph ]]; then
            continue
        elif ! grep -q "^$file" tests/self_hosted_skip.txt; then
            if [[ $file == tests/*_error.oomph ]]; then
                check "$file" "./oomphc $file" "2>/dev/null" tests/output/self_hosted should_fail
            else
                command="$valgrind ./oomphc $compiler_valgrind_arg $file"
                check "$file" "$command" "$noise" tests/output/common should_succeed
            fi
        elif ! grep -q "^$file" tests/self_hosted_skip_ast.txt; then
            run check "$file" "$valgrind ./oomphc --ast $file" "" "" should_succeed
        fi
    done
    wait
fi

status=0
msg="$(grep -c '^success:' test_out/status || true) succeeded"
if grep -q '^fail:' test_out/status; then
    msg="$msg, \u001b[31m$(grep -c '^fail:' test_out/status) failed\u001b[0m"
    status=1
fi
if grep -q '^skip:' test_out/status; then
    msg="$msg, $(grep -c '^skip:' test_out/status) skipped"
fi

echo ""
echo -e "==================== $msg ===================="
exit $status
