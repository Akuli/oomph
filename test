#!/bin/bash
set -e
set -o pipefail

keep_going=no
fix=no

while [[ "$1" == --* ]]; do
    case "$1" in
        --keep-going)
            keep_going=yes
            shift
            ;;
        --fix)
            fix=yes
            shift
            ;;
        --valgrind)
            valgrind='valgrind -q --leak-check=full --show-leak-kinds=all'
            compiler_valgrind_arg="--valgrind='$valgrind'"
            shift
            ;;
        *)
            echo "unknown argument: $1" 1>&2
            exit 2
    esac
done

make

function check()
{
    local file=$1
    local compiler=$2

    if [[ $file == tests/*_error.oomph ]]; then
        local expect_fail=yes
        if [ $compiler == pyoomph ]; then
            local outfile=tests/output/pyoomph/$(basename $file | cut -d. -f1).txt
            local command="python3 -m pyoomph $file"
        else
            local outfile=tests/output/self_hosted/$(basename $file | cut -d. -f1).txt
            local command="./oomphc $file"
        fi
    else
        local expect_fail=no
        local outfile=tests/output/common/$(basename $file | cut -d. -f1).txt
        if [ $compiler == pyoomph ]; then
            local command="python3 -m pyoomph $compiler_valgrind_arg $file"
        else
            local command="$valgrind ./oomphc $compiler_valgrind_arg $file"
        fi
        if [ $file == tests/args.oomph ]; then
            command="$command hello world"
        fi
    fi

    if [ $keep_going == no ] && grep -q '^fail:' test_out/status; then
        echo "skip: $command" >> test_out/status
        return
    fi

    local success
    local out=test_out/$(echo $command | sed 's/[^a-z0-9]/-/g').txt

    echo "$command"
    if [ $expect_fail == yes ] && eval "$command" 2>&1 | grep -v "This happened while" | tail -2 > $out; then
        echo "========== SHOULD HAVE ERRORED but it didn't: $command"
        success=no
    elif [ $expect_fail == no ] && ! eval "$command" > $out; then
        echo "========== ERROR: $command"
        success=no
    else
        if [ $file != tests/assert_error.oomph ]; then
            sed -i 's/, line [0-9][0-9]*/, line N/' $out
        fi
        if [ $fix == yes ]; then
            touch $outfile
        fi

        if diff --color --unified $outfile $out; then
            success=yes
        elif [ $fix == yes ]; then
            echo "Updating $outfile with this diff"
            cp $out $outfile
            success=yes
        else
            echo "========== diff does not match: $command"
            success=no
        fi
    fi

    if [ $success == yes ]; then
        echo "success: $command" >> test_out/status
    else
        echo "fail: $command" >> test_out/status
    fi
}

function run()
{
    if [ $(jobs | wc -l) -ge $(nproc) ]; then
        wait -n
    fi
    "$@" &
}

mkdir -vp test_out
rm -rvf test_out/status test_out/io_testing_dir oomphc
touch test_out/status
echo "Running $(nproc) tests at a time in parallel"
trap wait EXIT

for file in tests/*.oomph; do
    if [[ $file == tests/*_lib.oomph ]]; then
        # The file is meant to be imported
        continue
    fi
    run check $file pyoomph
done
wait

# Run all self-hosted tests with same compiler (speeds up a LOT)
if [ $keep_going == yes ] || ! grep -q '^fail:' test_out/status; then
    echo "Compiling self-hosted compiler"
    python3 -m pyoomph -o oomphc self_hosted/main.oomph
fi

for file in $(sed 's/#.*//g' tests/self_hosted.txt); do
    # Currently self-hosted doesn't parallelize well, but is fast
    check $file self_hosted
done

status=0
msg="$(grep -c '^success:' test_out/status || true) succeeded"
if grep -q '^fail:' test_out/status; then
    msg="$msg, \u001b[31m$(grep -c '^fail:' test_out/status) failed\u001b[0m"
    status=1
fi
if grep -q '^skip:' test_out/status; then
    msg="$msg, $(grep -c '^skip:' test_out/status) skipped"
fi

echo ""
echo -e "==================== $msg ===================="
exit $status
