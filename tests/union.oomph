union Thing:
    Foo
    Bar
    Baz

# Can be defined after the union
class Foo(Int foo_thing)
class Bar()
class Baz()

func print_thing(Thing thing):
    switch thing:
        case Foo f:
            print("Foo {f.foo_thing}")
        case Bar b:
            print("Bar {b}")
        case Baz b:
            print("Baz {b}")

    switch thing:
        case Foo f:
            print("  it's a Foo")
        case *:
            print("  it's not a Foo")

export func main():
    print_thing(new Thing(new Foo(69)))
    print_thing(new Thing(new Bar()))
    print_thing(new Thing(new Baz()))

    print("\nWith implicit conversions:\n")
    print_thing(new Foo(69))
    print_thing(new Bar())
    print_thing(new Baz())

    let f1 = new Foo(1)
    let f2 = new Foo(1)
    print(new Thing(f1) == new Thing(f1))
    print(new Thing(f1) == new Thing(f2))
    print(new Thing(f1) == f1)
    print(new Thing(f1) == f2)
    print(f1 == new Thing(f1))
    print(f1 == new Thing(f2))
    print(f1 == new Thing(new Bar()))
