import "<stdlib>/io.oomph" as io

class ShitEntry(Str key, Str value)
class ShitMapping(List[ShitEntry] entries):
    meth set(Str key, Str value):
        foreach entry of self.entries:
            if entry.key == key:
                entry.value = value
                return
        self.entries.push(new ShitEntry(key, value))

    meth get(Str key) -> Str | null:
        foreach entry of self.entries:
            if entry.key == key:
                return entry.value
        return null

    meth delete(Str key):
        foreach entry of self.entries:
            if entry.key == key:
                self.entries.delete_only(entry)
                return
        assert(false)

    meth keys() -> List[Str]:
        return [foreach entry of self.entries: entry.key]

    meth length() -> Int:
        return self.entries.length()


func pow(Int a, Int b) -> Int:
    assert(b >= 0)
    let result = 1
    for let i = 0; i < b; i = i+1:
        result = result * a
    return result


class PRNG(Int state, List[Str] strings):
    meth get_number(Int range_end) -> Int:
        # from linux rand(3) man page
        # sticking to mod 32 because oomph doesn't have unsigneds
        let new_state = self.state*1103515245 + 12345
        assert(new_state >= 0)
        self.state = new_state mod pow(2, 32)
        return self.state mod range_end

    meth get_string() -> Str:
        return self.strings.get(self.get_number(self.strings.length()))


func get_strings() -> List[Str]:
    let result = []
    foreach word of io::read_file("self_hosted/ast2ir.oomph").replace("\n", " ").split(" "):
        if word != "":
            result.push(word)
    return result

func ensure_lists_contain_same_items(List[Str] a, List[Str] b):
    foreach item of a:
        b.delete_only(item)
    assert(b == [])


export func main():
    let prng = new PRNG(1234, get_strings())

    let mapping1 = new Mapping[Str, Str]()
    let mapping2 = new ShitMapping([])

    for let i = 0; i < 1000; i = i+1:
        let operation = prng.get_number(3)

        if operation == 0:
            # Set
            let key = prng.get_string()
            let value = prng.get_string()
            mapping1.set(key, value)
            mapping2.set(key, value)
        elif operation == 1:
            # Get
            let key = prng.get_string()
            if mapping2.get(key) == null:
                assert(not mapping1.has_key(key))
            else:
                assert(mapping1.has_key(key))
                assert(mapping1.get(key) == (mapping2.get(key) as not null))
        elif operation == 2:
            # Delete
            let key = prng.get_string()
            if key in mapping2.keys():
                print("Delete key: {key}")
                print("({key}) in mapping 1 keys: {key in mapping1.keys()}")
                print("({key}) in mapping 2 keys: {key in mapping2.keys()}")
                print("({key}) mapping1 has_key: {mapping1.has_key(key)}")
                mapping1.delete(key)
                mapping2.delete(key)
            else:
                assert(not mapping1.has_key(key))

        assert(mapping1.length() == mapping2.length())
        assert(mapping1 == mapping1.copy())
        ensure_lists_contain_same_items(mapping1.keys(), mapping2.keys())

    print("ok")
