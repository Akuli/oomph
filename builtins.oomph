func __Bool_to_string(Bool self) -> Str:
    if self:
        return "true"
    return "false"

func __Str_find_first(Str self, Str substring) -> Optional[Int]:
    let result = __string_find_internal(self, substring)
    if result == -1:   # Currently it's difficult to have optionals in C code
        return null
    return result

func __Str_repeat(Str self, Int n) -> Str:
    # Square and multiply algorithm
    let result = ""
    let doubling = self
    while n > 0:
        if n mod 2 == 1:
            result = result + doubling
        n = (n / 2).floor()
        doubling = doubling + doubling
    return result

func __Str_remove_prefix(Str self, Str prefix) -> Optional[Str]:
    let result = __remove_prefix(self, prefix)
    if result == self and prefix != "":
        return null
    return result

func __Str_remove_suffix(Str self, Str suffix) -> Optional[Str]:
    let result = __remove_suffix(self, suffix)
    if result == self and suffix != "":
        return null
    return result

func __Str_starts_with(Str self, Str prefix) -> Bool:
    return (self.remove_prefix(prefix) != null)

func __Str_ends_with(Str self, Str suffix) -> Bool:
    return (self.remove_suffix(suffix) != null)

func __Str_contains(Str self, Str substring) -> Bool:
    return (self == "" and substring == "") or __string_from_start_to(self, substring) != self

# No need to use a third party library for this, lol
func __Str_left_pad(Str self, Int len, Str pad_char) -> Str:
    return pad_char.repeat(len - self.length()) + self

func __Str_right_pad(Str self, Int len, Str pad_char) -> Str:
    return self + pad_char.repeat(len - self.length())

func __Str_center_pad(Str self, Int len, Str pad_char) -> Str:
    let average = ((self.length() + len)/2).floor()
    return self.left_pad(average, pad_char).right_pad(len, pad_char)

func __Str_count(Str self, Str substring) -> Int:

    if substring == "":
        # Same as what Python does
        return self.length() + 1

    # TODO: this loop isn't elegant, ideally condition could be 'i := self.find_first(...)'
    for let count = 0; ; count = count + 1:
        let i = self.find_first(substring)
        if i == null:
            return count
        self = self.slice(i.get() + substring.length(), self.length())

func starts_with_space(Str s) -> Bool:
    # TODO: all ascii whitespace
    return s.starts_with(" ") or s.starts_with("\n")

func __Str_left_trim(Str self) -> Str:
    while starts_with_space(self):
        self = self.slice(1, self.length())
    return self

func __Str_right_trim(Str self) -> Str:
    while self.ends_with(" "):   # FIXME: something like starts_with_space
        self = self.slice(0, self.length() - 1)
    return self

func __Str_trim(Str self) -> Str:
    return self.left_trim().right_trim()

func __Str_replace(Str self, Str old, Str neuw) -> Str:
    if old == "":
        # TODO: error
        return self

    let result = ""
    let remaining = self

    while true:
        let index = remaining.find_first(old)
        if index == null:
            return result + remaining
        result = result + remaining.slice(0, index.get()) + neuw
        remaining = remaining.slice(index.get() + old.length(), remaining.length())

func __Str_split(Str self, Str sep) -> List[Str]:
    let result = new List[Str]()
    if sep == "":
        result.push(self)
        return result

    while true:
        let i = self.find_first(sep)
        if i == null:
            result.push(self)
            return result

        result.push(self.slice(0, i.get()))
        self = self.slice(i.get() + sep.length(), self.length())

func __List_Str_join(List[Str] self, Str sep) -> Str:
    if self == []:
        return ""

    let result = self.get(0)
    for let i = 1; i < self.length(); i = i+1:
        result = result + sep + self.get(i)
    return result
