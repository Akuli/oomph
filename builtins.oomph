func __Bool_to_string(Bool self) -> Str:
    if self:
        return "true"
    return "false"

func __Str_get_utf8(Str self) -> List[Int]:
    # TODO: use list comprehension when self-hosted supports it
    let result = []
    for let i = 0; i < __utf8_len(self); i = i+1:
        result.push(__get_utf8_byte(self, i))
    return result

func __Str_repeat(Str self, Int n) -> Str:
    # Square and multiply algorithm
    let result = ""
    let doubling = self
    while n > 0:
        if n mod 2 == 1:
            result = result + doubling
        n = (n / 2).floor()
        doubling = doubling + doubling
    return result

func __Str_starts_with(Str self, Str prefix) -> Bool:
    return prefix == "" or self.remove_prefix(prefix) != self

func __Str_ends_with(Str self, Str suffix) -> Bool:
    return suffix == "" or self.remove_suffix(suffix) != self

func __Str___contains(Str self, Str substring) -> Bool:
    return (self == "" and substring == "") or __slice_until_substring(self, substring) != self

# No need to use a third party library for this, lol
func __Str_left_pad(Str self, Int len, Str pad_char) -> Str:
    return pad_char.repeat(len - self.length()) + self

func __Str_right_pad(Str self, Int len, Str pad_char) -> Str:
    return self + pad_char.repeat(len - self.length())

func __Str_center_pad(Str self, Int len, Str pad_char) -> Str:
    let average = ((self.length() + len)/2).floor()
    return self.left_pad(average, pad_char).right_pad(len, pad_char)

func __Str_count(Str self, Str substring) -> Int:
    if substring == "":
        # Consistent with .split("")
        return self.length() - 1

    let count = 0
    while true:
        let before_substring = __slice_until_substring(self, substring)
        if before_substring == self:
            return count
        count = count + 1
        self = self.remove_prefix(before_substring).remove_prefix(substring)

func __Str_left_trim(Str self) -> Str:
    # TODO: all ascii whitespace?
    while self.starts_with(" ") or self.starts_with("\n"):
        self = self.remove_prefix(" ").remove_prefix("\n")
    return self

func __Str_right_trim(Str self) -> Str:
    # TODO: left_trim copy/pasta
    while self.ends_with(" ") or self.ends_with("\n"):
        self = self.remove_suffix(" ").remove_suffix("\n")
    return self

func __Str_trim(Str self) -> Str:
    return self.left_trim().right_trim()

func __Str_replace(Str self, Str old, Str n3w) -> Str:
    return self.split(old).join(n3w)

func __Str_split(Str self, Str sep) -> List[Str]:
    let result = []
    if sep == "":
        # get list of unicode characters
        while self != "":
            result.push(__get_first_char(self))
            self = self.remove_prefix(result.last())
        return result
    else:
        while true:
            let part = __slice_until_substring(self, sep)
            result.push(part)
            self = self.remove_prefix(part)
            if self == "":
                return result
            self = self.remove_prefix(sep)

func __List_Str_join(List[Str] self, Str sep) -> Str:
    if self == []:
        return ""

    let result = self.first()
    for let i = 1; i < self.length(); i = i+1:
        result = result + sep + self.get(i)
    return result
