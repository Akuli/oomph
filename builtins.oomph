func __bool_to_string(bool self) -> Str:
    if self:
        return "true"
    return "false"

func __Str_repeat(Str self, int n) -> Str:
    let result = self
    while result.length() < n*self.length():
        result = result + result
    return result.slice(0, n*self.length())

func __Str_starts_with(Str self, Str prefix) -> bool:
    return self.slice(0, prefix.length()) == prefix

func __Str_ends_with(Str self, Str suffix) -> bool:
    return self.slice(self.length() - suffix.length(), self.length()) == suffix

func __Str_contains(Str self, Str substring) -> bool:
    return self.find_first(substring) != -1

# No need to use a third party library for this, lol
func __Str_left_pad(Str self, int len, Str pad_char) -> Str:
    return pad_char.repeat(len - self.length()) + self

func __Str_right_pad(Str self, int len, Str pad_char) -> Str:
    return self + pad_char.repeat(len - self.length())

func __Str_center_pad(Str self, int len, Str pad_char) -> Str:
    let average = ((self.length() + len)/2).floor()
    return self.left_pad(average, pad_char).right_pad(len, pad_char)

func __Str_count(Str self, Str substring) -> int:
    let s = self
    let count = 0

    if substring == "":
        # TODO: error
        return -1

    # TODO: this loop isn't elegant, ideally would be 'while i := s.find_first(...)'
    while true:
        let i = s.find_first(substring)
        if i == -1:
            return count
        s = s.slice(i + substring.length(), s.length())
        count = count + 1

func __starts_with_space(Str s) -> bool:
    # TODO: all ascii whitespace
    return s.starts_with(" ")

func __Str_left_trim(Str self) -> Str:
    let s = self  # TODO: is this necessary?
    # TODO: all ascii whitespace
    while s.starts_with(" "):
        s = s.slice(1, s.length())
    return s

func __Str_right_trim(Str self) -> Str:
    let s = self
    while s.ends_with(" "):
        s = s.slice(0, s.length() - 1)
    return s

func __Str_trim(Str self) -> Str:
    return self.left_trim().right_trim()

func __Str_replace(Str self, Str old, Str neuw) -> Str:
    if old == "":
        # TODO: error
        return self

    let result = ""
    let remaining = self

    while true:
        let index = remaining.find_first(old)
        if index == -1:
            return result + remaining
        result = result + remaining.slice(0, index) + neuw
        remaining = remaining.slice(index + old.length(), remaining.length())

func __Str_split(Str self, Str sep) -> List[Str]:
    let result = new List[Str]()
    if sep == "":
        result.push(self)
        return result

    let s = self  # TODO: get rid of this, no longer necessary (even if it ever was)
    while true:
        let i = s.find_first(sep)
        if i == -1:
            result.push(s)
            return result

        result.push(s.slice(0, i))
        s = s.slice(i + sep.length(), s.length())

func __List_Str_join(List[Str] self, Str sep) -> Str:
    if self.length() == 0:
        return self.get(0)

    let result = self.get(0)
    for let i = 1; i < self.length(); i = i+1:
        result = result + sep + self.get(i)
    return result
